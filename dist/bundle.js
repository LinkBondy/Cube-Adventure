/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./Canvas.js":
/*!*******************!*\
  !*** ./Canvas.js ***!
  \*******************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"canvas\": () => (/* binding */ canvas)\n/* harmony export */ });\n\nclass Canvas {\n    constructor() {\n    }\n    createCanvasContext() {\n        var canvas = document.getElementById(\"mycanvas\");\n        this.context = canvas.getContext(\"2d\")\n        this.width = canvas.width\n        this.height = canvas.height\n    }\n}\n\nconst canvas = new Canvas()\n\n//# sourceURL=webpack://cube-adventure/./Canvas.js?");

/***/ }),

/***/ "./Class.js":
/*!******************!*\
  !*** ./Class.js ***!
  \******************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Background\": () => (/* binding */ Background),\n/* harmony export */   \"ChangeDirectionSquare\": () => (/* binding */ ChangeDirectionSquare),\n/* harmony export */   \"Enemy\": () => (/* binding */ Enemy),\n/* harmony export */   \"FinishArea\": () => (/* binding */ FinishArea),\n/* harmony export */   \"GameObject\": () => (/* binding */ GameObject),\n/* harmony export */   \"Hole\": () => (/* binding */ Hole),\n/* harmony export */   \"Item\": () => (/* binding */ Item),\n/* harmony export */   \"Player\": () => (/* binding */ Player),\n/* harmony export */   \"Rock\": () => (/* binding */ Rock),\n/* harmony export */   \"Teleporter\": () => (/* binding */ Teleporter),\n/* harmony export */   \"Unlock\": () => (/* binding */ Unlock),\n/* harmony export */   \"Wall\": () => (/* binding */ Wall),\n/* harmony export */   \"Water\": () => (/* binding */ Water)\n/* harmony export */ });\n\nconst {images} = __webpack_require__(/*! ./Images */ \"./Images.js\")\nconst {draw} = __webpack_require__(/*! ./Draw */ \"./Draw.js\")\nconst {GameMode, GameState, cubeStyle, gameStates} = __webpack_require__(/*! ./GameData */ \"./GameData.js\")\nconst {canvas} = __webpack_require__(/*! ./Canvas */ \"./Canvas.js\")\n\nclass GameObject {\n    constructor(x, y, width, height, color1) {\n       this.x = x \n       this.y = y \n       this.width = width\n       this.height = height\n       this.color1 = color1\n    }\n    intersects(otherBox) {\n        // Check if the left-top point is inside otherBox\n        if (this.left() >= otherBox.left() && this.left() < otherBox.right() &&\n            this.top() >= otherBox.top() && this.top() < otherBox.bottom()) {\n            return true\n        }\n        // Check if the right-top point is inside otherBox\n        if (this.right() > otherBox.left() && this.right() < otherBox.right() &&\n            this.top() >= otherBox.top() && this.top() < otherBox.bottom()) {\n            return true\n        } \n        // Check if the right-bottom point is inside otherBox\n        if (this.right() > otherBox.left() && this.right() < otherBox.right() &&\n            this.bottom() > otherBox.top() && this.bottom() < otherBox.bottom()) {\n            return true\n        }\n\n        // Check if the left-bottom point is inside otherBox\n        if (this.left() >= otherBox.left() && this.left() < otherBox.right() &&\n            this.bottom() > otherBox.top() && this.bottom() < otherBox.bottom()) {\n            return true\n        }\n\n        ////////////////////////\n\n        // Check if the left-top point is inside otherBox\n        if (otherBox.left() >= this.left() && otherBox.left() < this.right() &&\n            otherBox.top() >= this.top() && otherBox.top() < this.bottom()) {\n            return true\n        }\n        // Check if the right-top point is inside otherBox\n        if (otherBox.right() > this.left() && otherBox.right() < this.right() &&\n            otherBox.top() >= this.top() && otherBox.top() < this.bottom()) {\n            return true\n        }\n        // Check if the right-bottom point is inside otherBox\n        if (otherBox.right() > this.left() && otherBox.right() < this.right() &&\n            otherBox.bottom() > this.top() && otherBox.bottom() < this.bottom()) {\n            return true\n        }\n\n        // Check if the left-bottom point is inside otherBox\n        if (otherBox.left() >= this.left() && otherBox.left() < this.right() &&\n            otherBox.bottom() > this.top() && otherBox.bottom() < this.bottom()) {\n            return true\n        }\n        \n        return false\n    }\n    intersectsAll(otherBox) {\n        // Check if the left-top point is inside otherBox\n        if (this.left() === otherBox.left() && this.top() === otherBox.top()) { \n          return true\n        }\n        return false\n    }\n    left() {\n        return this.x\n    } \n    right() {\n        return this.x + this.width\n    } \n    top() {\n        return this.y\n    } \n    bottom() {\n        return this.y + this.height\n    }\n};\n\nclass Background {\n    constructor( color1) {\n        this.color1 = color1\n    }\n    \n    Draw() {\n        if (gameStates.currentGameState === GameState.Started && draw.spriteStyle && gameStates.currentGameMode !== GameMode.Shop || gameStates.currentGameState === GameState.Rules && draw.spriteStyle && gameStates.currentGameMode === GameMode.Freeplay || gameStates.currentGameState === GameState.Paused && draw.spriteStyle) {\n            this.color1 = \"rgb(100, 200, 100)\"\n        }\n        else {\n            this.color1 = \"lightgray\"\n        }\n        canvas.context.clearRect(0, 0, canvas.width, canvas.height);\n        canvas.context.fillStyle = this.color1;\n        canvas.context.fillRect(0,0, canvas.width, canvas.height) \n    }\n\n};\n\nclass Enemy extends GameObject {\n    constructor(x, y, width, height, movesLeft, movesRight, movesUp, movesDown, block_speed) {\n        super(x, y, width, height)\n        this.forward_x = true\n        this.forward_y = false\n        this.block_speed = block_speed\n        this.original_x = x\n        this.original_y = y\n        this.movesLeft = movesLeft\n        this.movesRight = movesRight\n        this.movesUp = movesUp\n        this.movesDown = movesDown\n        this.originalMovesLeft = this.movesLeft\n        this.originalMovesRight = this.movesRight\n        this.originalMovesUp = this.movesUp\n        this.originalMovesDown = this.movesDown\n        this.original_block_speed = block_speed\n        this.inWater = undefined\n        this.stopHole = false\n    }\n   \n    reset() {\n        this.x = this.original_x \n        this.y = this.original_y\n        this.movesLeft = this.originalMovesLeft  \n        this.movesRight = this.originalMovesRight  \n        this.movesUp = this.originalMovesUp\n        this.movesDown = this.originalMovesDown \n        this.block_speed = this.original_block_speed\n        this.inWater = undefined\n    }  \n    update(delta) {\n        var oldX = this.x\n        var oldY = this.y\n        var intersectsWall = false\n        var intersectsWater = false\n        var self = this\n            if (this.movesLeft && this.movesRight || this.movesUp && this.movesDown) {\n                var chooseMovement = Math.floor(Math.random() * 2 + 1)\n                //console.log(Math2)\n                if (chooseMovement === 1) {\n                    if (this.movesLeft && this.movesRight)\n                    this.movesLeft = false\n\n                    if (this.movesUp && this.movesDown)\n                    this.movesUp = false\n                        \n                }\n\n                if (chooseMovement === 2) {\n                    if (this.movesLeft && this.movesRight)\n                    this.movesRight = false\n                        \n                    if (this.movesUp && this.movesDown)\n                    this.movesDown = false\n                        \n                }\n            }\n        if (this.movesLeft) {\n            this.x = this.x - this.block_speed * delta\n        }\n\n        if (this.movesRight) { \n            this.x = this.x + this.block_speed * delta\n        }\n\n        if (this.movesUp) {\n            this.y = this.y - this.block_speed * delta\n        }\n\n        if (this.movesDown) { \n            this.y = this.y + this.block_speed * delta\n        }\n        gameStates.CurrentLevel().changeDirectionSquares.forEach(function(changeDirectionSquare) {\n            if (changeDirectionSquare.intersectsAll(self) && changeDirectionSquare.allowDirectionChange) {\n                //console.log(\"hi\")\n                if (changeDirectionSquare.changeLeft && changeDirectionSquare.changeRight || changeDirectionSquare.changeUp && changeDirectionSquare.changeDown) {\n                    var chooseMovementChange = Math.floor(Math.random() * 2 + 1)\n\n                    if (chooseMovementChange === 1) {\n                        if (changeDirectionSquare.changeLeft && changeDirectionSquare.changeRight)\n                        changeDirectionSquare.changeLeft = false\n\n                        if (changeDirectionSquare.changeUp && changeDirectionSquare.changeDown)\n                        changeDirectionSquare.changeUp = false\n                            \n                    }\n\n                    if (chooseMovementChange === 2) {\n                        if (changeDirectionSquare.changeLeft && changeDirectionSquare.changeRight)\n                        changeDirectionSquare.changeRight = false\n                            \n                        if (changeDirectionSquare.changeUp && changeDirectionSquare.changeDown)\n                        changeDirectionSquare.changeDown = false\n                            \n                    }\n                }\n                if (self.movesLeft || self.movesRight) {\n                    if (changeDirectionSquare.changeUp) {\n                        self.movesUp = true\n                    }\n\n                    if (changeDirectionSquare.changeDown) {\n                        self.movesDown = true\n                    }\n                    self.movesLeft = false\n                    self.movesRight = false\n                }\n                \n                else if (self.movesUp || self.movesDown) {\n                    if (changeDirectionSquare.changeLeft) {\n                        self.movesLeft = true\n                    }\n\n                    if (changeDirectionSquare.changeRight) {\n                        self.movesRight = true\n                    }\n                    self.movesUp = false\n                    self.movesDown = false\n                }\n            }\n        })\n\n        gameStates.CurrentLevel().walls.forEach(function(wall) {\n            if (wall.intersects(self) && !wall.allowMovement) {\n                intersectsWall = true\n            }\n        })\n\n        gameStates.CurrentLevel().rocks.forEach(function(rock) {\n            if (!rock.allowMovement && rock.intersects(self)) {\n                intersectsWall = true\n            }\n        })\n\n        gameStates.CurrentLevel().holes.forEach(function(hole) {\n            if (!hole.fullHole && hole.intersectsAll(self)) {\n                hole.currentIntersects = hole.currentIntersects + 1\n                self.stopHole = true\n                hole.stopEnemy = true\n            }\n\n            if (hole.stopEnemy && self.stopHole && !hole.intersects(self)) {\n                self.stopHole = false\n                hole.stopEnemy = false      \n            }\n\n            if (hole.fullHole && hole.intersects(self) && self.stopHole === false && hole.stopEnemy === false) {\n                intersectsWall = true\n            }\n        })\n\n        gameStates.CurrentLevel().waters.forEach(function(water) {\n            if (water.intersects(self)) {   \n                intersectsWater = true\n            }\n        })\n        if (intersectsWater && (this.inWater === false || this.inWater === undefined)) {\n            this.block_speed = this.block_speed / 2    \n        }\n\n        if (!intersectsWater && this.inWater === true) {\n            this.block_speed = this.block_speed * 2    \n        }\n\n        this.inWater = intersectsWater\n\n        gameStates.CurrentLevel().finishAreas.forEach(function(finishArea) {\n            if (finishArea.intersects(self)) {\n                intersectsWall = true\n            }\n        })\n            \n        if (this.movesRight && this.x >= 850 - this.width || this.movesLeft && this.x <= 0 || (this.movesLeft || this.movesRight) && intersectsWall) {\n            this.movesLeft = !this.movesLeft\n            this.movesRight = !this.movesRight\n            this.x = oldX\n        }\n\n        if (this.movesDown && this.y >= 600 - this.height || this.movesUp && this.y <= 0 || (this.movesUp || this.movesDown) && intersectsWall) {\n            this.movesUp = !this.movesUp\n            this.movesDown = !this.movesDown\n            this.y = oldY\n        }\n    }\n\n    Draw() {\n        if (draw.spriteStyle) {\n            draw.DrawImage(images.RedCube, this.x, this.y)\n        }\n        \n        else if (draw.plasticStyle) {\n            draw.DrawImage(images.RedCubePlastic, this.x, this.y)\n        }\n    } \n};\n\nclass Player extends GameObject {\n    constructor(x, y, width, height) {\n        super(x, y, width, height)\n        this.original_x = x\n        this.original_y = y\n        this.previousIntersectsHole = false\n    }\n    moveRight() {\n        var oldX = this.x\n        this.x = this.x + 50\n        var intersectsWall = false\n        var self = this\n        gameStates.CurrentLevel().walls.forEach(function(wall) {\n            if (!wall.allowMovement && wall.intersects(self)) {\n                intersectsWall = true\n                gameStates.CurrentLevel().holes.forEach(function(hole) {\n                    hole.stopPlayer = true\n                })\n            }\n        })\n\n        gameStates.CurrentLevel().rocks.forEach(function(rock) {\n            if (!rock.allowMovement && rock.intersects(self)) {\n                intersectsWall = true\n                gameStates.CurrentLevel().holes.forEach(function(hole) {\n                    hole.stopPlayer = true\n                })\n            }\n        })\n\n        gameStates.CurrentLevel().waters.forEach(function(water) {\n            gameStates.CurrentLevel().items.forEach(function(item) {\n                if (!item.allowMovementWater && item.typeNumber === 1 && water.intersects(self)) {\n                    intersectsWall = true\n                    gameStates.CurrentLevel().holes.forEach(function(hole) {\n                        hole.stopPlayer = true\n                    })\n                }\n            })\n            \n        })\n\n        gameStates.CurrentLevel().holes.forEach(function(hole) {\n            if (hole.intersects(self) && !hole.fullHole && !hole.stopPlayer) {\n                hole.currentIntersects = hole.currentIntersects + 0.5\n                hole.previousIntersectsHole = true\n            }\n            if (!hole.intersects(self) && hole.previousIntersectsHole && !hole.stopPlayer) {\n                hole.currentIntersects = hole.currentIntersects + 0.5\n                hole.previousIntersectsHole = false\n            }\n        })\n\n        gameStates.CurrentLevel().items.forEach(function(item) {\n            if (item.intersects(self)) {\n                if (item.typeNumber === 1) {\n                    item.allowMovementWater = true\n                }\n                item.collected = true   \n            }\n        })\n\n        if (intersectsWall) {\n            this.x = oldX \n        }\n        gameStates.CurrentLevel().holes.forEach(function(hole) {\n            if (hole.stopPlayer)\n                hole.stopPlayer = false\n        })\n    }\n    moveLeft() {\n        var oldX = this.x\n        this.x = this.x - 50\n        var intersectsWall = false\n        var self = this\n        gameStates.CurrentLevel().walls.forEach(function(wall) {\n            if (!wall.allowMovement && wall.intersects(self)) {\n                intersectsWall = true\n                gameStates.CurrentLevel().holes.forEach(function(hole) {\n                    hole.stopPlayer = true\n                })\n            }\n        })\n\n        gameStates.CurrentLevel().rocks.forEach(function(rock) {\n            if (!rock.allowMovement && rock.intersects(self)) {\n                intersectsWall = true\n                gameStates.CurrentLevel().holes.forEach(function(hole) {\n                    hole.stopPlayer = true\n                })\n            }\n        })\n\n        gameStates.CurrentLevel().waters.forEach(function(water) {\n            gameStates.CurrentLevel().items.forEach(function(item) {\n                if (!item.allowMovementWater && item.typeNumber === 1 && water.intersects(self)) {\n                    intersectsWall = true\n                    gameStates.CurrentLevel().holes.forEach(function(hole) {\n                        hole.stopPlayer = true\n                    })\n                }\n            })\n            \n        })\n\n        gameStates.CurrentLevel().holes.forEach(function(hole) {\n            if (hole.intersects(self) && !hole.fullHole && !hole.stopPlayer) {\n                hole.currentIntersects = hole.currentIntersects + 0.5\n                hole.previousIntersectsHole = true\n            }\n            if (!hole.intersects(self) && hole.previousIntersectsHole && !hole.stopPlayer) {\n                hole.currentIntersects = hole.currentIntersects + 0.5\n                hole.previousIntersectsHole = false\n            }\n        })\n\n        gameStates.CurrentLevel().items.forEach(function(item) {\n            if (item.intersects(self)) {\n                if (item.typeNumber === 1) {\n                    item.allowMovementWater = true\n                }\n                item.collected = true   \n            }\n        })\n\n        if (intersectsWall) {\n            this.x = oldX \n        }\n        gameStates.CurrentLevel().holes.forEach(function(hole) {\n            if (hole.stopPlayer)\n                hole.stopPlayer = false\n        })\n    }\n    moveDown() {\n        var oldY = this.y\n        this.y = this.y + 50\n        var intersectsWall = false\n        var self = this\n        gameStates.CurrentLevel().walls.forEach(function(wall) {\n            if (!wall.allowMovement && wall.intersects(self)) {\n                intersectsWall = true\n                gameStates.CurrentLevel().holes.forEach(function(hole) {\n                    hole.stopPlayer = true\n                })\n            }\n        })\n\n        gameStates.CurrentLevel().rocks.forEach(function(rock) {\n            if (!rock.allowMovement && rock.intersects(self)) {\n                intersectsWall = true\n                gameStates.CurrentLevel().holes.forEach(function(hole) {\n                    hole.stopPlayer = true\n                })\n            }\n        })\n\n        gameStates.CurrentLevel().waters.forEach(function(water) {\n            gameStates.CurrentLevel().items.forEach(function(item) {\n                if (!item.allowMovementWater && item.typeNumber === 1 && water.intersects(self)) {\n                    intersectsWall = true\n                    gameStates.CurrentLevel().holes.forEach(function(hole) {\n                        hole.stopPlayer = true\n                    })\n                }\n            })\n            \n        })\n\n        gameStates.CurrentLevel().holes.forEach(function(hole) {\n            if (hole.intersects(self) && !hole.fullHole && !hole.stopPlayer) {\n                hole.currentIntersects = hole.currentIntersects + 0.5\n                hole.previousIntersectsHole = true\n            }\n            if (!hole.intersects(self) && hole.previousIntersectsHole && !hole.stopPlayer) {\n                hole.currentIntersects = hole.currentIntersects + 0.5\n                hole.previousIntersectsHole = false\n            }\n        })\n\n        gameStates.CurrentLevel().items.forEach(function(item) {\n            if (item.intersects(self)) {\n                if (item.typeNumber === 1) {\n                    item.allowMovementWater = true\n                }\n                item.collected = true   \n            }\n        })\n\n        if (intersectsWall) {\n            this.y = oldY\n        }\n        gameStates.CurrentLevel().holes.forEach(function(hole) {\n            if (hole.stopPlayer)\n                hole.stopPlayer = false\n        })\n    }\n    moveUp() {\n        var oldY = this.y\n        this.y = this.y - 50\n        var intersectsWall = false\n        var self = this\n        gameStates.CurrentLevel().walls.forEach(function(wall) {\n            if (!wall.allowMovement && wall.intersects(self)) {\n                intersectsWall = true\n                gameStates.CurrentLevel().holes.forEach(function(hole) {\n                    hole.stopPlayer = true\n                })\n            }\n        })\n\n        gameStates.CurrentLevel().rocks.forEach(function(rock) {\n            if (!rock.allowMovement && rock.intersects(self)) {\n                intersectsWall = true\n                gameStates.CurrentLevel().holes.forEach(function(hole) {\n                    hole.stopPlayer = true\n                })\n            }\n        })\n\n        gameStates.CurrentLevel().waters.forEach(function(water) {\n            gameStates.CurrentLevel().items.forEach(function(item) {\n                if (!item.allowMovementWater && item.typeNumber === 1 && water.intersects(self)) {\n                    intersectsWall = true\n                    gameStates.CurrentLevel().holes.forEach(function(hole) {\n                        hole.stopPlayer = true\n                    })\n                }\n            })\n            \n        })\n\n        gameStates.CurrentLevel().holes.forEach(function(hole) {\n            if (hole.intersects(self) && !hole.fullHole && !hole.stopPlayer) {\n                hole.currentIntersects = hole.currentIntersects + 0.5\n                hole.previousIntersectsHole = true\n            }\n            if (!hole.intersects(self) && hole.previousIntersectsHole && !hole.stopPlayer) {\n                hole.currentIntersects = hole.currentIntersects + 0.5\n                hole.previousIntersectsHole = false\n            }\n        })\n\n        gameStates.CurrentLevel().items.forEach(function(item) {\n            if (item.intersects(self)) {\n                if (item.typeNumber === 1) {\n                    item.allowMovementWater = true\n                }\n                item.collected = true   \n            }\n        })\n\n        if (intersectsWall) {\n            this.y = oldY \n        }\n        gameStates.CurrentLevel().holes.forEach(function(hole) {\n            if (hole.stopPlayer)\n                hole.stopPlayer = false\n        })\n    }\n    reset() {\n        this.x = this.original_x \n        this.y = this.original_y\n    }   \n    update() {\n\n    }   \n    Draw() {\n        if (gameStates.currentCubeStyle === cubeStyle.BlueCube && draw.spriteStyle) {\n            draw.DrawImage(images.BlueCube, this.x, this.y)\n        }\n        \n        else if (gameStates.currentCubeStyle === cubeStyle.Alien && draw.spriteStyle) {\n            draw.DrawImage(images.BlueCubeAlien, this.x, this.y)\n        }\n\n        else if (gameStates.currentCubeStyle === cubeStyle.Lava && draw.spriteStyle) {\n            draw.DrawImage(images.BlueCubeLava, this.x, this.y)\n        }\n\n        else if (gameStates.currentCubeStyle === cubeStyle.Wooden && draw.spriteStyle) {\n            draw.DrawImage(images.BlueCubeWooden, this.x, this.y)\n        }\n\n        else if (gameStates.currentCubeStyle === cubeStyle.Sad && draw.spriteStyle) {\n            draw.DrawImage(images.BlueCubeSad, this.x, this.y)\n        }\n\n        else if (gameStates.currentCubeStyle === cubeStyle.BlueCube && draw.plasticStyle) {\n            draw.DrawImage(images.BlueCubePlastic, this.x, this.y)\n        }\n        \n        else if (gameStates.currentCubeStyle === cubeStyle.Alien && draw.plasticStyle) {\n            draw.DrawImage(images.BlueCubeAlienPlastic, this.x, this.y)        \n        }\n\n        else if (gameStates.currentCubeStyle === cubeStyle.Lava && draw.plasticStyle) {\n            draw.DrawImage(images.BlueCubeLavaPlastic, this.x, this.y)        \n        }\n\n        else if (gameStates.currentCubeStyle === cubeStyle.Wooden && draw.plasticStyle) {\n            draw.DrawImage(images.BlueCubeWoodenPlastic, this.x, this.y)        \n        }\n\n        else if (gameStates.currentCubeStyle === cubeStyle.Sad && draw.plasticStyle) {\n            draw.DrawImage(images.BlueCubeSadPlastic, this.x, this.y)        \n        }\n    }\n};\ngameStates.currentCubeStyle = cubeStyle.BlueCube\n\nclass Wall extends GameObject {\n    constructor(x, y, width, height, color1, allowMovement, invisibleWall) {\n        super(x, y, width, height, color1)\n        this.allowMovement = allowMovement\n        this.invisibleWall = invisibleWall\n        this.randomList = Array(100)\n        for (var i = 0; i < 100; i++) {\n            this.randomList[i] = Math.floor(Math.random() * 1000)\n        }\n    }\n\n    Draw() {\n        if (this.invisibleWall && draw.spriteStyle) {\n            var i = 0; \n            for (var x = this.left(); x < this.right(); x = x + 50) {\n                for (var y = this.top(); y < this.bottom(); y = y + 50) {\n                    i++\n                    canvas.context.save()\n                    canvas.context.translate(x - 2, y - 2)\n                    ///\n                    if (this.randomList[i] % 15 === 0)\n                    draw.DrawImage(images.InvisibleWallV2, 0,  0)\n                    else \n                    draw.DrawImage(images.InvisibleWall, 0,  0)\n                    canvas.context.restore()\n                }\n            }            \n         \n        } else if (draw.spriteStyle && !this.invisibleWall) {\n             var i = 0; \n             for (var x = this.left(); x < this.right(); x = x + 50) {\n                 for (var y = this.top(); y < this.bottom(); y = y + 50) {\n                    i++\n                    ///\n                    canvas.context.save()\n                    canvas.context.translate(x - 2, y - 2)\n                    //if (this.randomList[i] % 2 === 0)\n                        //canvas.context.rotate(90 * Math.PI / 180)\n                    if (this.randomList[i] % 40 === 0)\n                       draw.DrawImage(images.WallGrassV3, 0, 0) \n                     \n                    else if (this.randomList[i] % 9 === 0)\n                       draw.DrawImage(images.WallGrassV2, 0, 0) \n                    \n                    else if (this.randomList[i] % 998 === 0 && gameStates.currentGameMode === GameMode.StoryMode) {\n                       draw.DrawImage(images.WallGrassTree, 0, 0)\n                        draw.blueCubeWoodenLock = false\n                    }\n \n                    else\n                       draw.DrawImage(images.WallGrassV1, 0, 0) \n\n\n                    canvas.context.restore()\n                         \n                }\n            }\n            \n            } else if (draw.plasticStyle) {\n                canvas.context.fillStyle = this.color1\n                canvas.context.fillRect(this.x, this.y, this.width, this.height)\n            } \n \n    }\n};\n\nclass Water extends GameObject {\n    constructor(x, y, width, height, color1) {\n        super(x, y, width, height, color1)\n        this.spriteX = 0\n    }\n\n    Draw() {\n        if (draw.spriteStyle === true) {\n            if (gameStates.currentGameState === GameState.Started) {\n                var numMilliseconds = new Date().getTime()\n                if (numMilliseconds % 5 === 4) {\n                    this.spriteX = (this.spriteX + 54) % (54*49)\n                }\n            }\n            for (var x = this.left(); x < this.right(); x = x + 50) {\n                for (var y = this.top(); y < this.bottom(); y = y + 50) {\n                    canvas.context.drawImage(images.Water_Medium2, this.spriteX, 0, 54, images.Water_Medium2.height, x, y, 54, images.Water_Medium2.height)\n                }\n            }\n        }\n        if (draw.plasticStyle === true) {\n            canvas.context.fillStyle = this.color1;\n            canvas.context.fillRect(this.x, this.y, this.width, this.height)\n        }\n    }\n    Update() {\n        \n    }\n    \n    reset() {  \n    } \n};\n\nclass Item extends GameObject {\n    constructor(x, y, width, height, typeNumber) {\n        super(x, y, width, height)\n        this.typeNumber = typeNumber\n        this.allowMovementWater = false\n        this.collected = false\n    }\n\n    Draw() {\n        if (this.typeNumber === 1 && !this.collected && draw.spriteStyle) {    \n           draw.DrawImage(images.LifeJacket, this.x, this.y)     \n        }\n\n        if (this.typeNumber === 1 && !this.collected && draw.plasticStyle) {    \n           draw.DrawImage(images.LifeJacketPlastic, this.x, this.y)     \n        }\n\n        if (this.typeNumber === 2 && !this.collected && draw.spriteStyle && gameStates.currentGameMode === GameMode.StoryMode && draw.blueCubeAlienLock) {    \n           draw.DrawImage(images.Three_Bead, this.x, this.y)     \n        }\n\n        if (this.typeNumber === 2 && !this.collected && draw.plasticStyle && gameStates.currentGameMode === GameMode.StoryMode && draw.blueCubeAlienLock) {    \n           draw.DrawImage(images.Three_Bead_Plastic, this.x, this.y)     \n        }\n    }\n    \n    update() {\n        if (this.typeNumber === 2 && this.collected && gameStates.currentGameMode === GameMode.StoryMode) {    \n            draw.blueCubeAlienLock = false     \n        }\n    }\n    \n    reset() {\n        this.allowMovementWater = false\n        this.collected = false\n    }\n};\n\nclass ChangeDirectionSquare extends GameObject {\n    constructor(x, y, width, height, changeLeft, changeRight, changeUp, changeDown, allowDirectionChange, title) {\n        super(x, y, width, height, \"red\")\n        this.color2 = \"orange\"\n        this.allowDirectionChangeOld = allowDirectionChange\n        this.allowDirectionChange = allowDirectionChange\n        this.changeLeft = changeLeft\n        this.changeRight = changeRight\n        this.changeUp = changeUp\n        this.changeDown = changeDown\n        this.title = title\n    }\n    Draw() {\n        if (!this.allowDirectionChange)\n        canvas.context.fillStyle = this.color2\n\n        else \n        canvas.context.fillStyle = this.color1\n        canvas.context.fillRect(this.x, this.y, this.width, this.height)\n    }\n    reset() {\n        this.allowDirectionChange = this.allowDirectionChangeOld\n    }\n};\n\nclass Rock extends GameObject {\n    constructor(x, y, width, height, color1, color2, title, allowMovement, colorNumber, typeNumber) {\n        super(x, y, width, height, color1)\n        this.color2 = color2\n        this.title = title\n        this.allowMovement = allowMovement\n        this.colorNumber = colorNumber\n        this.typeNumber = typeNumber\n    }\n\n        Draw() {\n            var self = this\n            if (draw.spriteStyle && this.typeNumber === 1) {\n                if (this.colorNumber === 1) {\n                    gameStates.CurrentLevel().unlocks.forEach(function(unlock) {\n                        if (unlock.activated && unlock.title === self.title) {\n                           draw.DrawImage(images.UnlockedRockBlue, self.x, self.y)\n                            \n                        } else if (!unlock.activated && unlock.title === self.title) {\n                           draw.DrawImage(images.UnlockRockBlue, self.x, self.y)    \n                        }\n                    })\n                } else if (this.colorNumber === 2) {\n                    gameStates.CurrentLevel().unlocks.forEach(function(unlock) {\n                        if (unlock.activated && unlock.title === self.title) {\n                           draw.DrawImage(images.UnlockedRockPurple, self.x, self.y)    \n                        \n                        } else if (!unlock.activated && unlock.title === self.title) {\n                           draw.DrawImage(images.UnlockRockPurple, self.x, self.y)    \n                        }\n                    })\n            }       \n            } else if (draw.plasticStyle && this.typeNumber === 1) {\n                gameStates.CurrentLevel().unlocks.forEach(function(unlock) { \n                    if (!unlock.activated && unlock.title === self.title)\n                        canvas.context.fillStyle = self.color1\n\n                    if (unlock.activated && unlock.title === self.title)\n                        canvas.context.fillStyle = self.color2\n                })\n                canvas.context.fillRect(this.x, this.y, this.width, this.height)\n                 \n            }\n     \n        }\n        \n    \n};\n\nclass Unlock extends GameObject {\n    constructor(x, y, width, height, color1, color2, activatedcolor, title, colorNumber) {\n        super(x, y, width, height, color1)\n        this.color2 = color2\n        this.activatedcolor = activatedcolor\n        this.title = title\n        this.colorNumber = colorNumber\n    }\n\n    update() {\n       var self = this\n       gameStates.CurrentLevel().players.forEach(function(player) {\n            if (self.intersectsAll(player)) {\n                gameStates.CurrentLevel().rocks.forEach(function(rock) {\n                    if (self.title === rock.title) {\n                        rock.allowMovement = true\n                    }\n                })\n                gameStates.CurrentLevel().changeDirectionSquares.forEach(function(changeDirectionSquare) {\n                    if (self.title === changeDirectionSquare.title) {\n                        changeDirectionSquare.allowDirectionChange = true\n                    }\n                })\n                self.activated = true\n            }\n        })\n\n       gameStates.CurrentLevel().enemies.forEach(function(enemy) {\n            if (self.intersectsAll(enemy)) {\n                gameStates.CurrentLevel().rocks.forEach(function(rock) {\n                    if (self.title === rock.title) {\n                        rock.allowMovement = true\n                    }\n                })\n                gameStates.CurrentLevel().changeDirectionSquares.forEach(function(changeDirectionSquare) {\n                    if (self.title === changeDirectionSquare.title) {\n                        changeDirectionSquare.allowDirectionChange = true\n                    }\n                })\n                self.activated = true\n            }\n        })\n    }\n\n    Draw() {\n        if (draw.spriteStyle === true) {\n            if (this.colorNumber === 1) {\n            \n                if (this.activated) {\n                   draw.DrawImage(images.SwitchW1ActivatedBlue, this.x, this.y) \n                \n                } else {\n                   draw.DrawImage(images.SwitchW1Blue, this.x, this.y) \n                }\n            \n            } else if (this.colorNumber === 2) {\n            \n                if (this.activated) {\n                   draw.DrawImage(images.SwitchW1ActivatedPurple, this.x, this.y) \n                } else {\n                   draw.DrawImage(images.SwitchW1Purple, this.x, this.y)  \n                }\n            }            \n        \n        } else if (draw.plasticStyle === true) {\n            canvas.context.fillStyle = this.color1\n            canvas.context.fillRect(this.x, this.y, this.width, this.height)\n            if (this.activated) {\n                canvas.context.fillStyle = this.activatedcolor\n            \n            } else {\n                 canvas.context.fillStyle = this.color2    \n            }\n            canvas.context.fillRect(this.x + 10, this.y + 10, 30, 30)\n        }\n    }\n};\n\nclass Teleporter extends GameObject {\n    constructor(x, y, otherTeleporter, width, height, colorNumber) {\n        super(x, y, width, height)\n        this.colorNumber = colorNumber\n        this.stop = false\n        this.otherTeleporter = otherTeleporter\n    }\n\n    update() {\n       var self = this\n       gameStates.CurrentLevel().players.forEach(function(player) {\n            if (self.intersectsAll(player) && !self.stop) {   \n                self.otherTeleporter.stop = true\n                player.y = self.otherTeleporter.y\n                player.x = self.otherTeleporter.x\n            \n            }\n            if (!self.intersects(player) && self.stop) {\n                self.stop = false        \n            }\n        })\n    }\n\n    Draw() {\n        if (draw.spriteStyle) {\n            if (this.colorNumber === 1) {\n               draw.DrawImage(images.TeleporterTomatoSprite, this.x, this.y)   \n            }\n\n            if (this.colorNumber === 2) {\n               draw.DrawImage(images.TeleporterPurpleSprite, this.x, this.y)  \n            }\n        }\n\n        else if (draw.plasticStyle) {\n            if (this.colorNumber === 1) {\n               draw.DrawImage(images.TeleporterTomato, this.x, this.y) \n            }\n\n            if (this.colorNumber === 2) {\n               draw.DrawImage(images.TeleporterPurple, this.x, this.y) \n            }\n\n        }\n    }   \n};\n\nclass Hole extends GameObject {\n    constructor(x, y, width, height, fullHole, currentIntersects, maxIntersects) {\n        super(x, y, width, height)\n        this.fullHole = fullHole\n        this.currentIntersects = currentIntersects\n        this.maxIntersects = maxIntersects\n        this.previousIntersectsHole = false\n        this.stopPlayer = false\n        this.stopEnemy = false\n        this.DrawingX = undefined\n    }\n\n    Draw() {\n        if (this.fullHole)\n            this.DrawingX = 100  \n\n        else if (this.currentIntersects < this.maxIntersects && this.currentIntersects !== 0)\n            this.DrawingX = 50 \n        \n        else\n            this.DrawingX = 0\n\n        if (draw.spriteStyle) {\n            canvas.context.drawImage(images.Hole, this.DrawingX, 0, 50, 50, this.x, this.y, this.width, this.height)\n        }\n\n        if (draw.plasticStyle) {\n            canvas.context.drawImage(images.HolePlastic, this.DrawingX, 0, 50, 50, this.x, this.y, this.width, this.height)\n     \n        }\n\n    }\n\n    update() {\n        if (this.currentIntersects >= this.maxIntersects) {\n            this.fullHole = true\n        }\n    }\n\n    reset() {\n        this.fullHole = false\n        this.currentIntersects = 0\n    }\n}\n\nclass FinishArea extends GameObject {\n    constructor(x, y, width, height) {\n        super(x, y, width, height, \"pink\")\n    }\n    \n    Draw() {\n        canvas.context.fillStyle = this.color1;\n        canvas.context.fillRect(this.x, this.y, this.width, this.height)\n    }\n};\n\n//# sourceURL=webpack://cube-adventure/./Class.js?");

/***/ }),

/***/ "./Cube Adventure.js":
/*!***************************!*\
  !*** ./Cube Adventure.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"game\": () => (/* binding */ game)\n/* harmony export */ });\n\nconst {MenuController, menusVaribles} = __webpack_require__(/*! ./Menu */ \"./Menu.js\");\nconst {LevelController} = __webpack_require__(/*! ./Levels */ \"./Levels.js\")\nconst {Background} = __webpack_require__(/*! ./Class */ \"./Class.js\")\nconst {InfoController} = __webpack_require__ (/*! ./ItemInfo */ \"./ItemInfo.js\");\nconst {images} = __webpack_require__(/*! ./Images */ \"./Images.js\");\nconst {draw} = __webpack_require__(/*! ./Draw */ \"./Draw.js\");\nconst {Keydown} = __webpack_require__(/*! ./Keydown */ \"./Keydown.js\");\nconst {MouseDown} = __webpack_require__ (/*! ./MouseDown */ \"./MouseDown.js\");\nconst {GameMode, GameState, gameStates, levelTools, dataManagement} = __webpack_require__(/*! ./GameData */ \"./GameData.js\");\nconst {canvas} = __webpack_require__(/*! ./Canvas */ \"./Canvas.js\")\nvar audio = {\n    //MusicW1: new Audio(),\n\n    SetMusic: function() {\n        /*if (gameStates.currentGameState === GameState.Started)\n            audio.MusicW1.play();\n        else\n            audio.MusicW1.pause();\n            */\n    }\n}\n\nvar game = {\n    startTime: new Date(),\n    isRunning: true,\n    lastTime: new Date().getTime(),\n    /// \n    mainLoop: function() {\n        var timePassed = new Date().getTime() - game.lastTime\n        game.lastTime = new Date().getTime()\n        /*if (!game.isRunning)\n            timePassed = 0\n        console.log('timePassed is: ', timePassed)\n        var delta = timePassed/20\n        console.log(delta)\n        if (delta > 1)\n        delta = 1*/\n        var delta = 1\n        dataManagement.Save(draw)\n        levelTools.update(delta)\n        draw.DrawGame()\n        if (levelTools.checkWin() && gameStates.currentGameState !== GameState.WonStage ) {\n            setTimeout(function() {\n                if (gameStates.currentGameMode === GameMode.StoryMode) {\n                    gameStates.SetGameState(GameState.WonStage)\n                } else {\n                    levelTools.Restart()\n                    gameStates.currentLevelIndex = (gameStates.infoController.unlockedLevel + 1)\n                    gameStates.SetGameState(GameState.Rules)\n                    levelTools.Restart()\n                }\n\n            }, 300)\n\n        } else if(levelTools.checkLose() && gameStates.currentGameState !== GameState.Lost) {\n            setTimeout(function() {\n                if (gameStates.currentGameMode === GameMode.StoryMode) {\n                    gameStates.SetGameState(GameState.Lost)\n                }\n\n                if (gameStates.currentGameMode === GameMode.Freeplay) {\n                    levelTools.Restart()\n                    gameStates.SetGameState(GameState.Rules)\n                }\n              }, 30)\n        }\n        window.setTimeout(game.mainLoop, 1000 / 120)\n        //window.requestAnimationFrame(game.mainLoop)\n    },\n}\n\nfunction handleVisibilityChange() {\n    if (document.visibilityState === \"hidden\") {\n        console.log('it is hidden')\n        game.isRunning = false\n    } else {\n        console.log('it is showing')\n        game.lastTime = new Date().getTime()\n        game.isRunning = true\n    }\n}\n\nfunction ImageLoadingLoop() {\n    if (images.stillLoading > 0) {\n        window.setTimeout(ImageLoadingLoop, 1000 / 60)\n    }\n    else {\n        StartGame()\n    }\n}\n\nfunction StartGame() {\n    canvas.createCanvasContext();\n    draw.game = game\n    menusVaribles.game = game\n    gameStates.levelController = new LevelController()\n    gameStates.background = new Background()\n    gameStates.infoController = new InfoController()\n    gameStates.menuController = new MenuController()\n    gameStates.levelController.createLevels()\n    dataManagement.Load(draw)\n    game.mainLoop()\n}\n\nfunction LoadGame() {\n    ///\n    if (navigator.userAgent.match(/Android/i) || navigator.userAgent.match(/webOS/i) || navigator.userAgent.match(/iPhone/i) || navigator.userAgent.match(/iPad/i ) || navigator.userAgent.match(/iPod/i) || navigator.userAgent.match(/BlackBerry/i)) {\n            gameStates.mobile = true       \n    } else {\n            gameStates.mobile = false\n    }\n    images.LoadImages()\n    ///\n    //audio.MusicW1.src = \"musicName\";\n    //\n    ///\n    ImageLoadingLoop()\n}\n\ndocument.addEventListener(\"visibilitychange\", handleVisibilityChange, false);\ndocument.addEventListener('DOMContentLoaded', LoadGame)\ndocument.addEventListener('keydown', Keydown/*.bind(undefined, game)*/)\ndocument.addEventListener('mousedown', MouseDown/*.bind(undefined, game)*/)\n\n//# sourceURL=webpack://cube-adventure/./Cube_Adventure.js?");

/***/ }),

/***/ "./Draw.js":
/*!*****************!*\
  !*** ./Draw.js ***!
  \*****************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"draw\": () => (/* binding */ draw)\n/* harmony export */ });\n\nconst {GameMode, GameState, ShopMode, PlayerStyles, BackgroundStyles, cubeStyle, gameStates, levelTools} = __webpack_require__(/*! ./GameData */ \"./GameData.js\");\nconst {canvas} = __webpack_require__(/*! ./Canvas */ \"./Canvas.js\")\nconst {images} = __webpack_require__(/*! ./Images */ \"./Images.js\");\nvar draw = {\n    blueCubeWoodenLock: true,\n    blueCubeSadLock: true,\n    blueCubeAlienLock: true,\n    spriteStyle: true,\n    plasticStyle: false,\n    DrawImage: function(image, x, y) {\n        canvas.context.drawImage(image, 0, 0, image.width, image.height, x, y, image.width, image.height)\n    },\n    DrawGame: function() {\n        gameStates.background.Draw()\n        if (gameStates.currentGameState < GameState.Rules && gameStates.currentGameState > 0 && gameStates.mobile) \n            draw.DrawImage(images.BackButton, 750, 0)\n        if (gameStates.currentGameState > GameState.Menu) {\n            if (gameStates.currentGameMode === GameMode.StoryMode)\n                this.StoryModeDraw()\n\n            if (gameStates.currentGameMode === GameMode.Freeplay)\n                this.FreeplayDraw()\n\n            if (gameStates.currentGameMode === GameMode.Shop)\n                this.ShopDraw()\n\n            if (gameStates.currentGameMode === GameMode.ItemsInfo)\n                gameStates.infoController.Draw()\n\n            /*if (gameStates.currentGameMode === GameMode.Settings)\n                this.SettingsDraw()*/\n        } else {\n            if (gameStates.currentGameState === GameState.NotStarted)\n                this.StartingSreenDraw()\n            if (gameStates.currentGameState === GameState.Menu)\n                gameStates.menuController.MainMenu.Draw()\n        }\n    },\n    StoryModeDraw: function() {\n        if (gameStates.currentGameState === GameState.Started || gameStates.currentGameState === GameState.Paused) {\n            this.LevelsDraw()\n        }\n\n        if (gameStates.currentGameState === GameState.Rules)\n            this.DrawRules()\n\n        if (gameStates.currentGameState === GameState.WonStage) {\n            gameStates.menuController.WinMenu.Draw()\n            this.DrawFinishText()\n            return\n        }\n            \n        if (gameStates.currentGameState === GameState.Lost) {\n            if (levelTools.loseCounterStop === false) {\n                levelTools.currentLosses = levelTools.currentLosses + 1\n                if (levelTools.currentLosses === 50) {\n                    draw.blueCubeSadLock = false\n                }\n                levelTools.loseCounterStop = true\n            }   \n            gameStates.menuController.LoseMenu.Draw()\n            this.DrawLoseText()\n\n        }\n\n        if (gameStates.currentGameState === GameState.Paused) {\n            canvas.context.fillStyle = \"rgba(128, 128, 128, 0.6)\"\n            canvas.context.fillRect(0, 0, 850, 600)\n            gameStates.menuController.PauseMenu.Draw()\n        }\n    },  \n    FreeplayDraw: function() {\n        this.LevelsDraw()\n        if (gameStates.currentGameState === GameState.Rules)\n        this.DrawFreeplayLevel()\n    },\n    ShopDraw: function() {\n        if (gameStates.currentGameState === GameState.Rules)\n            gameStates.menuController.ShopMenu.Draw()\n        \n            if (gameStates.currentGameState === GameState.Started)  {\n                if (gameStates.currentShopMode === ShopMode.Backround) {\n                    if (gameStates.currentBackgroundStyle === BackgroundStyles.Plastic) {\n                        this.DrawBackroundPlasticShop()   \n                    }\n                    if (gameStates.currentBackgroundStyle === BackgroundStyles.Sprite) {\n                        this.DrawBackroundSpriteShop()   \n                    }\n                }\n\n                if (gameStates.currentShopMode === ShopMode.Player) {\n                    if (gameStates.currentPlayerStyle === PlayerStyles.BlueCube) {\n                        this.DrawBlueCubeShop()   \n                    }\n                    \n                    if (gameStates.currentPlayerStyle === PlayerStyles.BlueCubeAlien) {\n                        this.DrawBlueCubeAlienShop()   \n                    }\n                    \n                    if (gameStates.currentPlayerStyle === PlayerStyles.BlueCubeLava) {\n                        this.DrawBlueCubeLavaShop()   \n                    }\n    \n                    if (gameStates.currentPlayerStyle === PlayerStyles.BlueCubeWooden) {\n                        this.DrawBlueCubeWoodenShop()   \n                    }\n    \n                    if (gameStates.currentPlayerStyle === PlayerStyles.BlueCubeSad) {\n                        this.DrawBlueCubeSadShop()   \n                    }\n                }\n\n                if (gameStates.mobile) {\n                    draw.DrawImage(images.UpArrowShop, 10, 450)\n                    draw.DrawImage(images.DownArrowShop, 690, 450)\n                }\n            }\n    },\n    StartingSreenDraw: function() {\n        canvas.context.font = '275px Arial';\n        canvas.context.fillStyle = 'black'\n        canvas.context.fillText(\"CUB\", 0, 250);\n        canvas.context.font = '125px Arial';\n        canvas.context.fillStyle = 'red'\n        canvas.context.fillText(\"Adventure\", 120, 400);\n        canvas.context.font = '60px Arial';\n        canvas.context.fillStyle = 'darkred'\n        canvas.context.fillText(\"Press Space to Begin\", 120, 550);\n        ///\n        canvas.context.fillStyle = \"black\"\n        canvas.context.fillRect(600, 50, 200, 200)\n        canvas.context.fillStyle = \"lightgray\"\n        canvas.context.fillRect(600 + 20, 50 + 40, 40, 40)\n        canvas.context.fillRect(600 + 140, 50 + 40, 40, 40)\n        canvas.context.fillRect(600 + 20, 50 + 130, 160, 40)\n    },\n    LevelsDraw: function() {\n        gameStates.CurrentLevel().waters.forEach(function(water) {\n            water.Draw()\n        },)\n\n        gameStates.CurrentLevel().finishAreas.forEach(function(finishArea) {\n            finishArea.Draw()\n        },)\n\n        gameStates.CurrentLevel().holes.forEach(function(hole) {  \n            hole.Draw()\n        },)\n\n        gameStates.CurrentLevel().unlocks.forEach(function(unlock) {\n            unlock.Draw()\n        },)\n\n        gameStates.CurrentLevel().teleporters.forEach(function(teleporter) {\n            teleporter.Draw()\n        })\n\n        gameStates.CurrentLevel().items.forEach(function(item) {\n            item.Draw()\n        })\n\n        gameStates.CurrentLevel().rocks.forEach(function(rock) {  \n            rock.Draw()\n        },)\n\n        /*gameStates.CurrentLevel().changeDirectionSquares.forEach(function(changeDirectionSquare) {\n            changeDirectionSquare.Draw()\n        },)*/\n\n        gameStates.CurrentLevel().players.forEach(function(player) {\n            player.Draw()        \n        },)\n\n        gameStates.CurrentLevel().enemies.forEach(function(enemy) {\n            enemy.Draw()\n        },)\n        \n        gameStates.CurrentLevel().walls.forEach(function(wall) {\n            wall.Draw()\n        },)\n    },\n    DrawRules: function() {\n        canvas.context.font = \"175px Arial\";\n        canvas.context.fillStyle = 'purple'\n        canvas.context.fillText(\"Rules\", 200, 175);\n        ///\n        canvas.context.font = '45px Arial';\n        canvas.context.fillStyle = 'rgb(2, 0, 139)'\n        canvas.context.fillText(\"Get to the pink to beat levels\", 150, 275);\n        canvas.context.fillText(\"Watch out for enemies\", 200, 350);\n        if (!gameStates.mobile) {\n            canvas.context.fillText(\"Use A, D, S, D or Arrow Keys to move\", 50, 425);\n        }\n        else if (gameStates.mobile) {\n            canvas.context.font = '35px Arial';\n            canvas.context.fillText(\"Tap above, below, to the left or to the right to move\", 35, 415);\n        }\n        canvas.context.font = '75px Arial';\n        canvas.context.fillStyle = 'blue'\n        canvas.context.fillText(\"Press space to start\", 80, 550);\n    }, \n    DrawFinishText: function() {\n        canvas.context.font = '88px Arial';\n        canvas.context.fillStyle = 'red' \n        canvas.context.fillText(\"Level \" + (gameStates.currentLevelIndex + 1) + \" Complete!\", 60, 100); \n    },\n    DrawLoseText: function() {\n        canvas.context.font = '130px Arial';\n        canvas.context.fillStyle = \"darkorchid\";\n        canvas.context.fillText(\"You Lose\", 10, 120);\n        canvas.context.font = '75px Arial';\n        canvas.context.fillStyle = \"darkmagenta\";\n        canvas.context.fillText(\"Losses\", 575, 75);\n        canvas.context.fillText((levelTools.currentLosses), 675, 150);\n    },\n    DrawFreeplayLevel: function() {\n        canvas.context.font = '125px Arial';\n        canvas.context.fillStyle = \"rgba(255, 255, 132, 0.788)\";\n        canvas.context.fillText(\"Level \" + (gameStates.currentLevelIndex + 1), 225, 575);\n        if (gameStates.mobile === true) {\n            draw.DrawImage(images.UpArrow, 10, 450)\n            draw.DrawImage(images.DownArrow, 690, 450)\n        }\n        \n    },\n    DrawBackroundSpriteShop: function() {\n        draw.DrawImage(images.WallGrassV1_400x400, 225, 20)\n        if (draw.spriteStyle) {\n            if (gameStates.mobile === true) {\n                canvas.context.font = '75px Arial'\n                canvas.context.fillStyle = 'indianred'\n                canvas.context.fillText(\"Sprite(Selected)\", 155, 550)  \n            }\n\n            else {\n                canvas.context.font = '100px Arial'\n                canvas.context.fillStyle = 'indianred'\n                canvas.context.fillText(\"Sprite(Selected)\", 65, 550)  \n            }\n        }  \n        \n        else {\n        canvas.context.font = '175px Arial'\n        canvas.context.fillStyle = 'indianred'\n        canvas.context.fillText(\"Sprite\", 190, 550)\n        }\n\n    },\n    DrawBackroundPlasticShop: function() {\n        canvas.context.fillStyle = \"rgb(190, 190, 190)\"\n        canvas.context.fillRect(225, 20, 400, 400)\n        if (draw.plasticStyle) {\n            if (gameStates.mobile === true) {\n                canvas.context.font = '75px Arial'\n                canvas.context.fillStyle = 'indianred'\n                canvas.context.fillText(\"Plastic\", 300, 500)\n                canvas.context.fillText(\"(Selected)\", 250, 575)  \n            }\n\n            else {\n                canvas.context.font = '100px Arial'\n                canvas.context.fillStyle = 'indianred'\n                canvas.context.fillText(\"Plastic(Selected)\", 50, 550)   \n            }\n                 \n        }\n        else {\n            canvas.context.font = '175px Arial'\n            canvas.context.fillStyle = 'indianred'\n            canvas.context.fillText(\"Plastic\", 165, 575)\n        }    \n    },\n    DrawBlueCubeShop: function() {\n        draw.DrawImage(images.BlueCube_400x400, 225, 25)\n        if (gameStates.currentCubeStyle === cubeStyle.BlueCube) {\n            if (gameStates.mobile === true) {\n                canvas.context.font = '75px Arial'\n                canvas.context.fillStyle = 'indianred'\n                canvas.context.fillText(\"Classic\", 300, 500)\n                canvas.context.fillText(\"(Selected)\", 250, 575)\n            }\n\n            else {\n                canvas.context.font = '100px Arial'\n                canvas.context.fillStyle = 'indianred'\n                canvas.context.fillText(\"Classic(Selected)\", 35, 550)  \n            }\n                \n        }\n        else {\n        canvas.context.font = '150px Arial'\n        canvas.context.fillStyle = 'indianred'\n        canvas.context.fillText(\"Classic\", 175, 550)\n        }\n\n    },\n    DrawBlueCubeAlienShop: function() {\n        if (draw.blueCubeAlienLock === false) {\n            draw.DrawImage(images.BlueCubeAlien_400x400, 225, 25)\n        }\n        if (gameStates.currentCubeStyle === cubeStyle.Alien && draw.blueCubeAlienLock === false) {\n            if (gameStates.mobile === true) {\n                canvas.context.font = '75px Arial'\n                canvas.context.fillStyle = 'indianred'\n                canvas.context.fillText(\"Alien(Selected)\", 175, 550)\n            }\n\n            else {\n                canvas.context.font = '100px Arial'\n                canvas.context.fillStyle = 'indianred'\n                canvas.context.fillText(\"Alien(Selected)\", 85, 550)\n            }      \n        }\n\n        else if (draw.blueCubeAlienLock === true) {\n            canvas.context.font = '90px Arial'\n            canvas.context.fillStyle = 'hotpink'\n            canvas.context.fillText(\"Get the Three Bead\", 25, 100)\n            canvas.context.fillText(\"to unlock\", 245, 225)\n        }\n\n        if (gameStates.currentCubeStyle !== cubeStyle.Alien) {\n            canvas.context.font = '150px Arial'\n            canvas.context.fillStyle = 'indianred'\n            canvas.context.fillText(\"Alien\", 260, 550)\n        }\n    },\n    DrawBlueCubeLavaShop: function() {\n        draw.DrawImage(images.BlueCubeLava_400x400, 225, 25)\n        if (gameStates.currentCubeStyle === cubeStyle.Lava) {\n            if (gameStates.mobile === true) {\n                canvas.context.font = '75px Arial'\n                canvas.context.fillStyle = 'indianred'\n                canvas.context.fillText(\"Lava(Selected)\", 175, 550)\n            }\n\n            else {\n                canvas.context.font = '100px Arial'\n                canvas.context.fillStyle = 'indianred'\n                canvas.context.fillText(\"Lava(Selected)\", 87, 550)\n            }      \n        }\n        else {\n            canvas.context.font = '150px Arial'\n            canvas.context.fillStyle = 'indianred'\n            canvas.context.fillText(\"Lava\", 260, 550)\n        }\n   \n    },\n    DrawBlueCubeWoodenShop: function() {\n        if (draw.blueCubeWoodenLock === false) {\n            draw.DrawImage(images.BlueCubeWooden_400x400, 225, 25)\n        }\n\n        if (gameStates.currentCubeStyle === cubeStyle.Wooden && draw.blueCubeWoodenLock === false) {\n            if (gameStates.mobile === true) {\n                canvas.context.font = '75px Arial'\n                canvas.context.fillStyle = 'indianred'\n                canvas.context.fillText(\"Wooden(Selected)\", 100, 550)\n            }\n\n            else {\n            canvas.context.font = '100px Arial'\n            canvas.context.fillStyle = 'indianred'\n            canvas.context.fillText(\"Wooden(Selected)\", 10, 550)\n            }      \n        }\n        else if (draw.blueCubeWoodenLock === true) {\n            canvas.context.font = '75px Arial'\n            canvas.context.fillStyle = 'hotpink'\n            canvas.context.fillText(\"Find the tree to unlock\", 50, 100)\n            \n            if (gameStates.mobile === true) {\n                canvas.context.font = '125px Arial'\n                canvas.context.fillStyle = 'indianred'\n                canvas.context.fillText(\"Wooden\", 195, 550)\n            }\n            else {\n                canvas.context.font = '150px Arial'\n                canvas.context.fillStyle = 'indianred'\n                canvas.context.fillText(\"Wooden\", 140, 550)\n            }\n        }\n            \n        else {\n            canvas.context.font = '150px Arial'\n            canvas.context.fillStyle = 'indianred'\n            canvas.context.fillText(\"Wooden\", 140, 550)\n        }\n   \n    },\n    DrawBlueCubeSadShop: function() {\n        if (draw.blueCubeSadLock === false) {\n            draw.DrawImage(images.BlueCubeSad_400x400, 225, 25)\n        }\n\n        if (gameStates.currentCubeStyle === cubeStyle.Sad && draw.blueCubeSadLock === false) {\n            if (gameStates.mobile === true) {\n                canvas.context.font = '75px Arial'\n                canvas.context.fillStyle = 'indianred'\n                canvas.context.fillText(\"Sad(Selected)\", 180, 550)\n            }\n\n            else {\n            canvas.context.font = '100px Arial'\n            canvas.context.fillStyle = 'indianred'\n            canvas.context.fillText(\"Sad(Selected)\", 120, 550)\n            }      \n        }\n        else if (draw.blueCubeSadLock === true) {\n            canvas.context.font = '300px Arial'\n            canvas.context.fillStyle = 'hotpink'\n            canvas.context.fillText(\"???\", 175, 350)\n        }\n            \n        else {\n            canvas.context.font = '150px Arial'\n            canvas.context.fillStyle = 'indianred'\n            canvas.context.fillText(\"Sad\", 285, 550)\n        }\n   \n    },\n    //SettingsDraw: function() {},\n}\n\n//# sourceURL=webpack://cube-adventure/./Draw.js?");

/***/ }),

/***/ "./GameData.js":
/*!*********************!*\
  !*** ./GameData.js ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"BackgroundStyles\": () => (/* binding */ BackgroundStyles),\n/* harmony export */   \"GameMode\": () => (/* binding */ GameMode),\n/* harmony export */   \"GameState\": () => (/* binding */ GameState),\n/* harmony export */   \"PlayerStyles\": () => (/* binding */ PlayerStyles),\n/* harmony export */   \"ShopMode\": () => (/* binding */ ShopMode),\n/* harmony export */   \"cubeStyle\": () => (/* binding */ cubeStyle),\n/* harmony export */   \"dataManagement\": () => (/* binding */ dataManagement),\n/* harmony export */   \"gameStates\": () => (/* binding */ gameStates),\n/* harmony export */   \"levelTools\": () => (/* binding */ levelTools)\n/* harmony export */ });\n\nvar GameState = {\n    NotStarted: 0,\n    Menu: 1,\n    Rules: 2,\n    Started: 3,\n    Lost: 4,\n    WonStage: 5,\n    Paused: 6\n}\n\nvar GameMode = {\n    StoryMode: 1,\n    Freeplay: 2,\n    Shop: 3,\n    ItemsInfo: 4,\n    Setting: 5\n}\n\nvar ShopMode = {\n    ShopMenu: 1,\n    Backround: 2,\n    Player: 3\n}\n\nvar PlayerStyles = {\n    BlueCube: 1,\n    BlueCubeAlien: 2,\n    BlueCubeLava: 3,\n    BlueCubeWooden: 4,\n    BlueCubeSad: 5,\n}\n\nvar BackgroundStyles = {\n    Sprite: 1,\n    Plastic: 2\n}\n\nvar cubeStyle = {\n    BlueCube: 0,\n    Alien: 1,\n    Lava: 2,\n    Wooden: 3,\n    Sad: 4,\n}\n\nvar gameStates = {\n    currentGameState: GameState.NotStarted,\n    currentGameMode: GameMode.StoryMode,\n    currentShopMode: ShopMode.ShopMenu,\n    currentBackgroundStyle: BackgroundStyles.Sprite,\n    currentPlayerStyle: PlayerStyles.BlueCube,\n    currentCubeStyle: cubeStyle.BlueCube,\n    currentLevelIndex: 0,\n    mobile: false,\n    CurrentLevel: function() {\n      return gameStates.levelController.levels[gameStates.currentLevelIndex]\n    },\n\n    SetGameState: function(gameState) {\n        gameStates.currentGameState = gameState\n    }\n}\n\nvar levelTools = {\n    currentLosses: 0,\n    loseCounterStop: false,\n    update: function(delta) {\n        if  (gameStates.currentGameState === GameState.Started && gameStates.currentGameMode === GameMode.StoryMode || gameStates.currentGameState === GameState.Started && gameStates.currentGameMode === GameMode.Freeplay) {\n            gameStates.CurrentLevel().enemies.forEach(function(enemy) {\n                enemy.update(delta)\n            })\n            gameStates.CurrentLevel().players.forEach(function(player) {\n                player.update(delta)\n            })\n            gameStates.CurrentLevel().unlocks.forEach(function(unlock) {\n                unlock.update(delta)\n            })\n            gameStates.CurrentLevel().holes.forEach(function(hole) {\n                hole.update(delta)\n            })\n            gameStates.CurrentLevel().items.forEach(function(item) {\n                item.update(delta)\n            })\n            gameStates.CurrentLevel().teleporters.forEach(function(teleporter) {\n                teleporter.update(delta)\n            })\n        }\n    },\n\n    checkWin: function() {\n        var win = false\n        gameStates.CurrentLevel().players.forEach(function(player) {\n            gameStates.CurrentLevel().finishAreas.forEach(function(finishArea) {\n                if (finishArea.intersects(player)) {  \n                    win = true\n                } \n            })\n        })\n        return win \n    },\n\n    checkLose: function() {\n        var lose = false\n        gameStates.CurrentLevel().players.forEach(function(player) {\n            gameStates.CurrentLevel().enemies.forEach(function(enemy) {\n                if (player.intersects(enemy)) {\n                    lose = true\n                }\n            })\n            gameStates.CurrentLevel().holes.forEach(function(hole) {\n                if (player.intersectsAll(hole) && hole.fullHole) {\n                    lose = true\n                }\n            })\n        })\n            \n        return lose\n    },\n\n    NextLevel: function() {\n        levelTools.Restart()\n        if (gameStates.infoController.unlockedLevel !== gameStates.levelController.levels.length)\n            gameStates.infoController.unlockedLevel++\n        if (gameStates.currentLevelIndex === (gameStates.levelController.levels.length - 1)) {\n            gameStates.currentLevelIndex = 0\n            levelTools.Restart()\n            gameStates.SetGameState(GameState.NotStarted)\n        } else {\n            gameStates.currentLevelIndex++\n            levelTools.Restart()\n            gameStates.SetGameState(GameState.Started)\n        }\n\n    },\n\n    Restart: function() {\n        gameStates.CurrentLevel().enemies.forEach(function(enemy) {\n            enemy.reset() \n        })\n\n        gameStates.CurrentLevel().players.forEach(function(player) {\n            player.reset()\n        })\n\n        gameStates.CurrentLevel().unlocks.forEach(function(unlock) {\n            unlock.activated = false    \n        })\n\n        gameStates.CurrentLevel().rocks.forEach(function(rock) {\n            rock.allowMovement = false\n        })\n\n        gameStates.CurrentLevel().holes.forEach(function(hole) {\n            hole.reset()\n        })\n\n        gameStates.CurrentLevel().items.forEach(function(item) {\n            item.reset()\n        })\n\n        gameStates.CurrentLevel().changeDirectionSquares.forEach(function(changeDirectionSquare) {\n            changeDirectionSquare.reset()\n        })\n    },\n\n}\n\nvar dataManagement = {\n    Save: function(draw) {\n        if (gameStates.currentGameMode === GameMode.StoryMode) \n            window.localStorage.setItem('level', gameStates.currentLevelIndex)\n        if (gameStates.infoController.unlockedLevel !== gameStates.levelController.levels.length) \n            window.localStorage.setItem('isMax', true)    \n        window.localStorage.setItem('newUpdate', false)    \n        window.localStorage.setItem('stateGame', gameStates.currentGameState)\n        window.localStorage.setItem('PlayerAlienLock', draw.blueCubeAlienLock)\n        window.localStorage.setItem('PlayerWoodenLock', draw.blueCubeWoodenLock)\n        window.localStorage.setItem('PlayerSadLock', draw.blueCubeSadLock)\n        window.localStorage.setItem('StyleCube', gameStates.currentCubeStyle)\n        window.localStorage.setItem('styleSprite', draw.spriteStyle)\n        window.localStorage.setItem('stylePlastic', draw.plasticStyle)\n    },\n\n    Load: function(draw) {\n        var newUpdate = window.localStorage.getItem('newUpdate')    \n        if (newUpdate !== null) {\n            var level = Number(window.localStorage.getItem('level'))\n            var stateGame = Number(window.localStorage.getItem('stateGame'))\n            if (level !== null) {\n                gameStates.currentLevelIndex = level\n                if (stateGame === GameState.WonStage) {\n                    gameStates.currentLevelIndex++\n                }\n            }\n        }\n       \n        var WoodenLock = window.localStorage.getItem('PlayerWoodenLock')\n        if (WoodenLock !== null) {\n            if (WoodenLock === 'true')\n                WoodenLock = true\n\n            if (WoodenLock === 'false')\n                WoodenLock = false\n\n            draw.blueCubeWoodenLock = WoodenLock\n        }\n\n        var SadLock = window.localStorage.getItem('PlayerSadLock')\n        if (SadLock !== null) {\n            if (SadLock === 'true') \n                SadLock = true\n            \n            if (SadLock === 'false')\n                SadLock = false\n            \n            draw.blueCubeSadLock = SadLock\n        }\n\n        var AlienLock = window.localStorage.getItem('PlayerAlienLock')\n        if (AlienLock !== null) {\n            if (AlienLock === 'true') \n                AlienLock = true\n            \n            if (AlienLock === 'false')\n                AlienLock = false\n            \n            draw.blueCubeAlienLock = AlienLock\n        }\n\n        var styleSprite = window.localStorage.getItem('styleSprite')\n        if (styleSprite !== null) {\n            if (styleSprite === 'true')\n                styleSprite = true\n\n            if (styleSprite === 'false') \n                styleSprite = false\n\n            draw.spriteStyle = styleSprite\n        }\n\n        var stylePlastic = window.localStorage.getItem('stylePlastic')\n        if (stylePlastic !== null) {\n            if (stylePlastic === 'true')\n                stylePlastic = true\n\n            if (stylePlastic === 'false')\n                stylePlastic = false\n\n            draw.plasticStyle = stylePlastic\n        }\n\n        var StyleCube = Number(window.localStorage.getItem('StyleCube'))\n        if (StyleCube !== null) {\n            gameStates.currentCubeStyle = StyleCube\n        }\n        if (window.localStorage.getItem('isMax') === null)\n            gameStates.infoController.unlockedLevel = gameStates.levelController.levels.length\n        else\n            gameStates.infoController.unlockedLevel = gameStates.currentLevelIndex \n    },\n}\n\n\n//# sourceURL=webpack://cube-adventure/./GameData.js?");

/***/ }),

/***/ "./Images.js":
/*!*******************!*\
  !*** ./Images.js ***!
  \*******************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"images\": () => (/* binding */ images)\n/* harmony export */ });\n\nfunction LoadImage(path) {\n    var image = new Image()\n    image.src = path\n    images.stillLoading += 1\n    image.onload = function() {\n        images.stillLoading -= 1\n    }\n    return image\n}\nvar images = {\n    stillLoading: 0,\n    LoadImages: function() {\n        ///\n        images.WallGrassV1 = LoadImage(\"images/WallGrassV1.png\")\n        images.WallGrassV1_200x200 = LoadImage(\"images/WallGrassV1_200x200.png\")\n        images.WallGrassV1_400x400 = LoadImage(\"images/WallGrassV1_400x400.png\")\n        images.WallGrassV2 = LoadImage(\"images/WallGrassV2.png\")\n        images.WallGrassV3 = LoadImage(\"images/WallGrassV3.png\")\n        images.WallGrassTree = LoadImage(\"images/WallGrassTree.png\")\n        ///\n        images.BlueCube = LoadImage(\"images/BlueCube.png\")\n        images.BlueCubeAlien = LoadImage(\"images/BlueCubeAlien.png\")\n        images.BlueCubeLava = LoadImage(\"images/BlueCubeLava.png\")\n        images.BlueCubeWooden = LoadImage(\"images/BlueCubeWooden.png\")\n        images.BlueCubeSad = LoadImage(\"images/BlueCubeSad.png\")\n        ///\n        images.BlueCubePlastic = LoadImage(\"images/BlueCubePlastic.png\")\n        images.BlueCubeAlienPlastic = LoadImage(\"images/BlueCubeAlienPlastic.png\")\n        images.BlueCubeLavaPlastic = LoadImage(\"images/BlueCubeLavaPlastic.png\")\n        images.BlueCubeWoodenPlastic = LoadImage(\"images/BlueCubeWoodenPlastic.png\")\n        images.BlueCubeSadPlastic = LoadImage(\"images/BlueCubeSadPlastic.png\")\n        ///\n        images.BlueCube_400x400 = LoadImage(\"images/BlueCube_400x400.png\")\n        images.BlueCubeAlien_400x400 = LoadImage(\"images/BlueCubeAlien_400x400.png\")\n        images.BlueCubeLava_400x400 = LoadImage(\"images/BlueCubeLava_400x400.png\")\n        images.BlueCubeWooden_400x400 = LoadImage(\"images/BlueCubeWooden_400x400.png\")\n        images.BlueCubeSad_400x400 = LoadImage(\"images/BlueCubeSad_400x400.png\")\n        ///\n        images.RedCube = LoadImage(\"images/RedCube.png\")\n        images.RedCube_200x200 = LoadImage(\"images/RedCube_200x200.png\")\n        images.RedCubePlastic = LoadImage(\"images/RedCubePlastic.png\")\n        ///\n        images.TeleporterTomato = LoadImage(\"images/TeleporterTomato.png\")\n        images.TeleporterTomatoSprite = LoadImage(\"images/TeleporterTomatoSprite.png\")\n        images.TeleporterTomatoSprite_200x200 = LoadImage(\"images/TeleporterTomatoSprite_200x200.png\")\n        images.TeleporterPurple = LoadImage(\"images/TeleporterPurple.png\")\n        images.TeleporterPurpleSprite = LoadImage(\"images/TeleporterPurpleSprite.png\")\n        ///\n        images.SwitchW1Blue = LoadImage(\"images/SwitchW1Blue.png\")\n        images.SwitchW1Blue_200x200 = LoadImage(\"images/SwitchW1Blue_200x200.png\")\n        images.SwitchW1Purple = LoadImage(\"images/SwitchW1Purple.png\")\n        images.SwitchW1Purple_200x200 = LoadImage(\"images/SwitchW1Purple_200x200.png\")\n        images.SwitchW1ActivatedBlue = LoadImage(\"images/SwitchW1ActivatedBlue.png\")\n        images.SwitchW1ActivatedPurple = LoadImage(\"images/SwitchW1ActivatedPurple.png\")\n        ///\n        images.InvisibleWall = LoadImage(\"images/InvisibleWall.png\")\n        images.InvisibleWallV2 = LoadImage(\"images/InvisibleWallV2.png\")\n        images.InvisibleWall_200x200 = LoadImage(\"images/InvisibleWall_200x200.png\")\n        images.InvisibleWall_200x200V2 = LoadImage(\"images/InvisibleWall_200x200V2.png\")\n        ///\n        images.LifeJacket = LoadImage(\"images/LifeJacket.png\")\n        images.LifeJacket_200x200 = LoadImage(\"images/LifeJacket_200x200.png\")\n        images.LifeJacketPlastic = LoadImage(\"images/LifeJacketPlastic.png\")\n        ///\n        images.Three_Bead = LoadImage(\"images/Three_Bead.png\")\n        images.Three_Bead_Plastic = LoadImage(\"images/Three_Bead_Plastic.png\")\n        ///\n        images.Water_Medium2 = LoadImage(\"images/Water_Medium2.png\")\n        images.Water_Medium_200x200 = LoadImage(\"images/Water_Medium_200x200.png\")\n        ///\n        images.UnlockRockPurple = LoadImage(\"images/UnlockRockPurple.png\")\n        images.UnlockRockPurple_200x200 = LoadImage(\"images/UnlockRockPurple_200x200.png\")\n        images.UnlockedRockPurple = LoadImage(\"images/UnlockedRockPurple.png\")\n        images.UnlockRockBlue = LoadImage(\"images/UnlockRockBlue.png\")\n        images.UnlockRockBlue_200x200 = LoadImage(\"images/UnlockRockBlue_200x200.png\")\n        images.UnlockedRockBlue = LoadImage(\"images/UnlockedRockBlue.png\")\n        ///\n        images.Hole = LoadImage(\"images/Hole.png\")\n        images.Hole_200x200 = LoadImage(\"images/Hole_200x200.png\")\n        images.HolePlastic = LoadImage(\"images/HolePlastic.png\")\n        ///\n        images.UpArrow = LoadImage(\"images/UpArrow.png\")\n        images.DownArrow = LoadImage(\"images/DownArrow.png\")\n        images.UpArrowShop = LoadImage(\"images/UpArrowShop.png\")\n        images.DownArrowShop = LoadImage(\"images/DownArrowShop.png\")\n        ///\n        images.BackButton = LoadImage(\"images/BackButton.png\")\n        images.MenuButton = LoadImage(\"images/MenuButton.png\")\n    }\n}\n\n//# sourceURL=webpack://cube-adventure/./Images.js?");

/***/ }),

/***/ "./ItemInfo.js":
/*!*********************!*\
  !*** ./ItemInfo.js ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"InfoController\": () => (/* binding */ InfoController),\n/* harmony export */   \"itemInfoVaribles\": () => (/* binding */ itemInfoVaribles)\n/* harmony export */ });\n\nconst {images} = __webpack_require__(/*! ./Images */ \"./Images.js\")\nconst {draw} = __webpack_require__(/*! ./Draw */ \"./Draw.js\")\nconst {canvas} = __webpack_require__(/*! ./Canvas */ \"./Canvas.js\")\nconst {gameStates} = __webpack_require__(/*! ./GameData */ \"./GameData.js\");\n\nvar LockedFeature = {\n    infoEnemy: 1,\n    infoEnemy2: 9,\n    ///\n    infoWall: 2,\n    infoInvisibleWall: 5,\n    infoWater: 7,\n    ///\n    infoSwitch: 4,\n    infoTeleporter: 6,\n    ///\n    infoRock: 4,\n    ///\n    infoLifeJacket: 7,\n    ///\n    infoHole: 8,\n}\n\nvar itemInfoVaribles = {\n    game: undefined\n}\n\nclass InfoController {\n    constructor() {\n        this.items = [\n            new EnemyInfo(),\n            new BarrierInfo(),\n            new IntractableInfo(),\n            new UnlockableInfo(),\n            new CollectableInfo(),\n            new TrapInfo()\n        ]\n        this.itemIndex = 0\n        this.slideIndex = 0\n        this.unlockedLevel = 0\n    }\n\n    Keydown(event) {\n    // Down \n    if ((event.keyCode === 40 || event.key === \"s\") && this.itemIndex < (this.items.length - 1)) {\n        this.itemIndex = this.itemIndex + 1\n        this.slideIndex = 0\n    }\n       \n    // Up\n    if ((event.keyCode === 38 ||  event.key === \"w\") && this.itemIndex != 0) {\n        this.itemIndex = this.itemIndex - 1\n        this.slideIndex = 0\n    }\n        \n    // Right   \n    if ((event.keyCode === 39 ||  event.key === \"d\") && this.slideIndex < this.items[this.itemIndex].slides.length - 1)\n        this.slideIndex = this.slideIndex + 1\n    \n    // Left  \n    if ((event.keyCode === 37 ||  event.key === \"a\") && this.slideIndex > 0)\n        this.slideIndex = this.slideIndex - 1\n    }\n\n    Mousedown(event) {\n            // Forward   \n            if (event.offsetY > 150 && event.offsetY < 450) {\n                if ((this.items[this.itemIndex].slides.length - 1) === this.slideIndex) \n                this.slideIndex = 0\n                else\n                this.slideIndex++\n                return\n            }\n\n            // Down \n            if (event.offsetY > 450 && event.offsetY < 600 && event.offsetX < 850 && this.itemIndex < (this.items.length - 1)) {\n                this.itemIndex = this.itemIndex + 1\n                this.slideIndex = 0\n            }\n                \n            // Up\n            if (event.offsetY > 0 && event.offsetY < 150 && event.offsetX < 850 && this.itemIndex != 0) {\n                this.itemIndex = this.itemIndex - 1\n                this.slideIndex = 0\n            }\n    }\n\n    Draw() {\n        this.items[this.itemIndex].slides[this.slideIndex].Draw()\n    }\n};\n\nclass ItemText {\n    constructor(text, textSize, textColour, textX, textY) {\n        this.text = text\n        this.textSize = textSize\n        this.textColour = textColour\n        this.textX = textX\n        this.textY = textY\n    }\n\n    Draw() {\n        canvas.context.font = this.textSize;\n        canvas.context.fillStyle = this.textColour;\n        canvas.context.fillText(this.text, this.textX, this.textY);\n    }\n};\n\nclass ItemImage {\n    constructor(fullImage, image, placementX, placementY, placementWidth, placementHeight, imageX, imageY, imageWidth, imageHeight,) {\n        this.image = image\n        this.imageX = imageX\n        this.imageY = imageY\n        this.imageWidth = imageWidth\n        this.imageHeight = imageHeight\n        ///\n        this.placementX = placementX\n        this.placementY = placementY\n        this.placementWidth = placementWidth\n        this.placementHeight = placementHeight\n        ///\n        this.fullImage = fullImage\n    }\n\n    Draw() {\n        if (this.fullImage) {\n            console.log(this.imageHeight)\n            console.log(this.image)\n            canvas.context.drawImage(this.image, this.imageX, this.imageY, this.imageWidth, this.imageHeight, this.placementX, this.placementY, this.placementWidth, this.placementHeight)\n        } else if (!this.fullImage) {  \n            //console.log(this.image)\n            draw.DrawImage(this.image, this.placementX, this.placementY) \n        }\n    }\n};\n\nclass ItemSlide {\n    constructor(items, neededFeature) {\n        this.items = items\n        this.neededFeature = neededFeature\n    }\n\n    ShouldShowSlide(unlockedLevel) {\n        return unlockedLevel >= this.neededFeature\n        \n    }\n    Draw() {    \n        canvas.context.font = \"25px Arial\";\n        canvas.context.fillStyle = 'black'            \n        canvas.context.fillText(gameStates.infoController.slideIndex + \" / \" + (gameStates.infoController.items[gameStates.infoController.itemIndex].slides.length - 1), 790, 590);\n        ///\n        if (this.ShouldShowSlide(gameStates.infoController.unlockedLevel)) {\n            this.items.forEach(function(itemInfo) {\n                itemInfo.Draw()\n            })\n        } else {\n        canvas.context.font = \"125px Arial\";\n        canvas.context.fillStyle = 'lightcoral'\n        canvas.context.fillText(\"Item \" + gameStates.infoController.slideIndex, 200, 200);\n        ///\n        canvas.context.font = \"150px Arial\";\n        canvas.context.fillStyle = 'lime'\n        canvas.context.fillText(\"Beat Level \" + this.neededFeature, 10, 550);   \n      }\n    }\n};\n\nclass EnemyInfo {\n    constructor() {\n        var titleSlide = new ItemSlide([\n            new ItemText(\"Enemies\", \"200px Arial\", \"purple\", 10, 400),\n            ], 0)\n\n        var slide1 = new ItemSlide([\n            new ItemImage(false, images.RedCube_200x200, 625, 10),\n            ///\n            new ItemText(\"Cubers\", \"150px Arial\", \"purple\", 10, 150),\n            new ItemText(\"Cubers move left to right or up to\", \"50px Arial\", \"rgb(2, 0, 139)\", 10, 275),\n            new ItemText(\"down at a time.\", \"50px Arial\", \"rgb(2, 0, 139)\", 10, 350),\n            new ItemText(\"Players lose when they touch a cuber.\", \"48px Arial\", \"rgb(2, 0, 139)\", 10, 450),\n            new ItemText(\"Cubers can move at different speeds.\", \"48px Arial\", \"rgb(2, 0, 139)\", 10, 525),\n            ], LockedFeature.infoEnemy)\n\n        var slide2 = new ItemSlide([\n            new ItemImage(false, images.RedCube_200x200, 625, 10),\n            /// \n            new ItemText(\"Cubers\", \"150px Arial\", \"purple\", 10, 150),\n            new ItemText(\"Cubers can activate switches.\", \"50px Arial\", \"rgb(2, 0, 139)\", 10, 275),\n            new ItemText(\"Cubers move at normal speed in\", \"50px Arial\", \"rgb(2, 0, 139)\", 10, 375),\n            new ItemText(\"water when they collect life jackets.\", \"50px Arial\", \"rgb(2, 0, 139)\", 15, 450)\n        ], LockedFeature.infoEnemy2)\n\n        this.slides = [titleSlide, slide1, slide2]\n    }\n};\n\nclass BarrierInfo {\n    constructor() {\n        var titleSlide = new ItemSlide([\n            new ItemText(\"Barriers\", \"200px Arial\", \"purple\", 10, 400),\n            ], 0)\n        \n        var cuberSlide1 = new ItemSlide([\n            new ItemImage(false, images.WallGrassV1_200x200, 550, 10),\n            ///\n            new ItemText(\"Walls\", \"200px Arial\", \"purple\", 10, 160),\n            new ItemText(\"Walls stop players movement.\", \"60px Arial\", 'rgb(2, 0, 139)', 10, 300),\n            new ItemText(\"Cubers turn the opposite way,\", \"60px Arial\", 'rgb(2, 0, 139)', 10, 400),\n            new ItemText(\"when they touch walls.\", \"60px Arial\", 'rgb(2, 0, 139)', 15, 475),\n            new ItemText(\"Walls can look different.\", \"60px Arial\", \"rgb(2, 0, 139)\", 10, 575)\n        ], LockedFeature.infoWall)\n\n        var fakeWallSlide1 = new ItemSlide([\n            new ItemImage(false, images.InvisibleWall_200x200V2, 625, 10),\n            ///\n            new ItemText(\"Fake Walls\", \"120px Arial\", \"purple\", 10, 150),\n            new ItemText(\"Fake walls look like walls but\", \"60px Arial\", \"rgb(2, 0, 139)\", 10, 300),\n            new ItemText(\"their different.\", \"60px Arial\", \"rgb(2, 0, 139)\", 10, 375),\n            new ItemText(\"Fake walls don't do anthing.\", \"60px Arial\", \"rgb(2, 0, 139)\", 10, 475),\n            new ItemText(\"Fake walls can look different.\", \"60px Arial\", \"rgb(2, 0, 139)\", 10, 575),\n        ], LockedFeature.infoInvisibleWall)\n\n        var waterSlide1 = new ItemSlide([\n            new ItemImage(false, images.Water_Medium_200x200, 600, 10),\n            ///\n            new ItemText(\"Water\", \"200px Arial\", \"purple\", 10, 175),\n            new ItemText(\"Players need life jackets to go in\", \"55px Arial\", \"rgb(2, 0, 139)\", 10, 300),\n            new ItemText(\"the water.\", \"55px Arial\", \"rgb(2, 0, 139)\", 10, 375),\n            new ItemText(\"Cubers can go into water but,\", \"55px Arial\", \"rgb(2, 0, 139)\", 10, 475),\n            new ItemText(\"they move at half the speed.\", \"55px Arial\", \"rgb(2, 0, 139)\", 10, 550)\n        ], LockedFeature.infoWater)\n\n        this.slides = [titleSlide, cuberSlide1, fakeWallSlide1, waterSlide1]\n    }\n};\n\nclass IntractableInfo {\n    constructor() {\n        var titleSlide = new ItemSlide([\n            new ItemText(\"Intractables\", \"150px Arial\", \"purple\", 10, 400),\n            ], 0)\n\n        var switchSlide1 = new ItemSlide([\n            new ItemImage(false, images.SwitchW1Blue_200x200, 630, 10),\n            ///\n            new ItemText(\"Switches\", \"145px Arial\", \"purple\", 10, 150),\n            new ItemText(\"Players and ememies can go on switches.\", \"45px Arial\", \"rgb(2, 0, 139)\", 10, 275),\n            new ItemText(\"When players and ememies go on a\", \"45px Arial\", \"rgb(2, 0, 139)\", 10, 375),\n            new ItemText(\"switch it activates.\", \"45px Arial\", \"rgb(2, 0, 139)\", 10, 425),\n            new ItemText(\"Different switches can have different\", \"45px Arial\", \"rgb(2, 0, 139)\", 10, 525),\n            new ItemText(\"colours.\", \"45px Arial\", \"rgb(2, 0, 139)\", 10, 575),\n        ], LockedFeature.infoSwitch)\n\n        var switchSlide2 = new ItemSlide([\n            new ItemImage(false, images.SwitchW1Purple_200x200, 630, 10),\n            /// \n            new ItemText(\"Switches\", \"145px Arial\", \"purple\", 10, 150),\n            new ItemText(\"When a switch gets activated,\", \"55px Arial\", \"rgb(2, 0, 139)\", 10, 275),\n            new ItemText(\"unlockable rocks with the same\", \"55px Arial\", \"rgb(2, 0, 139)\", 10, 350),\n            new ItemText(\"colour breaks apart.\", \"55px Arial\", \"rgb(2, 0, 139)\", 10, 425)\n        ], LockedFeature.infoSwitch)\n\n        var teleporterSlide1 = new ItemSlide([\n            new ItemImage(false, images.TeleporterTomatoSprite_200x200, 625, 10),\n            ///\n            new ItemText(\"Teleporters\", \"120px Arial\", \"purple\", 10, 150),\n            new ItemText(\"When players go on teleporters\", \"55px Arial\", \"rgb(2, 0, 139)\", 10, 275),\n            new ItemText(\"they teleport to the matching\", \"55px Arial\", \"rgb(2, 0, 139)\", 10, 350),\n            new ItemText(\"teleporter.\", \"55px Arial\", \"rgb(2, 0, 139)\", 10, 425),\n            new ItemText(\"Only players can use teleporters.\", \"55px Arial\", \"rgb(2, 0, 139)\", 10, 525)\n        ], LockedFeature.infoTeleporter)\n\n        this.slides = [titleSlide, switchSlide1, switchSlide2, teleporterSlide1]\n\n\n    }\n};\n\nclass UnlockableInfo {\n    constructor() {\n        var titleSlide = new ItemSlide([\n            new ItemText(\"Unlockables\", \"150px Arial\", \"purple\", 10, 400),\n            ], 0)\n\n        var slide1 = new ItemSlide([\n            new ItemImage(false, images.UnlockRockBlue_200x200, 625, 10),\n            ///\n            new ItemText(\"Rocks\", \"200px Arial\", \"purple\", 10, 175),\n            new ItemText(\"Rocks act as barriers when altogether.\", \"45px Arial\", \"rgb(2, 0, 139)\", 10, 300),\n            new ItemText(\"Different rocks can have different colours.\", \"45px Arial\", \"rgb(2, 0, 139)\", 10, 400),\n            new ItemText(\"When switches activate they break rocks\", \"45px Arial\", \"rgb(2, 0, 139)\", 10, 500),\n            new ItemText(\"with the same colour.\", \"45px Arial\", \"rgb(2, 0, 139)\", 10, 550),\n        ], LockedFeature.infoRock)\n\n        var slide2 = new ItemSlide([\n            new ItemImage(false, images.UnlockRockPurple_200x200, 625, 10),\n            ///\n            new ItemText(\"Rocks\", \"200px Arial\", \"purple\", 10, 175),\n            new ItemText(\"Once broken players and\", \"65px Arial\", \"rgb(2, 0, 139)\", 10, 300),\n            new ItemText(\"cubers can go through\", \"65px Arial\", \"rgb(2, 0, 139)\", 10, 375),\n            new ItemText(\"them.\", \"65px Arial\", \"rgb(2, 0, 139)\", 10, 450),\n\n        ], LockedFeature.infoRock)\n        this.slides = [titleSlide, slide1, slide2]\n    }\n};\n\nclass CollectableInfo {\n    constructor() {\n        var titleSlide = new ItemSlide([\n            new ItemText(\"Collectables\", \"150px Arial\", \"purple\", 10, 400),\n            ], 0)\n\n        var slide1 = new ItemSlide([\n            new ItemImage(false, images.LifeJacket_200x200, 625, 10),\n            //\n            new ItemText(\"Life Jacket\", \"120px Arial\", \"purple\", 10, 150),\n            new ItemText(\"When players pick up life jackets they\", \"50px Arial\", \"rgb(2, 0, 139)\", 10, 262.5),\n            new ItemText(\"can go in water.\", \"50px Arial\", \"rgb(2, 0, 139)\", 10, 337.5),\n            new ItemText(\"When cubers pick up life jackets\", \"50px Arial\", \"rgb(2, 0, 139)\", 10, 437.5),\n            new ItemText(\"they can move at nomral speed in\", \"50px Arial\", \"rgb(2, 0, 139)\", 10, 500),\n            new ItemText(\"water.\", \"50px Arial\", \"rgb(2, 0, 139)\", 10, 562.5)\n        ], LockedFeature.infoLifeJacket)\n        this.slides = [titleSlide, slide1]\n    }\n};\n\nclass TrapInfo {\n    constructor() {\n        var titleSlide = new ItemSlide([\n            new ItemText(\"Traps\", \"300px Arial\", \"purple\", 10, 400),\n        ], 0)\n\n        var slide1 = new ItemSlide([\n            new ItemImage(true, images.Hole_200x200, 550, 10, 200, 200, 0, 0, 200, 200),\n            ///\n            new ItemText(\"Holes\", \"200px Arial\", \"purple\", 10, 160),\n            new ItemText(\"When a player or enemy go over a hole,\", \"45px Arial\", \"rgb(2, 0, 139)\", 10, 275),\n            new ItemText(\"its cover starts to fall.\", \"45px Arial\", \"rgb(2, 0, 139)\", 10, 325),\n            new ItemText(\"Different holes have different amounts of\", \"45px Arial\", \"rgb(2, 0, 139)\", 10, 400),\n            new ItemText(\"times a player can go over it.\", \"45px Arial\", \"rgb(2, 0, 139)\", 10, 450),\n            new ItemText(\"When a player goes over a uncovered\", \"45px Arial\", \"rgb(2, 0, 139)\", 10, 525),\n            new ItemText(\"hole you lose.\", \"45px Arial\", \"rgb(2, 0, 139)\", 10, 575),\n        ], LockedFeature.infoHole)    \n\n        var slide2 = new ItemSlide([\n            new ItemImage(true, images.Hole_200x200, 550, 10, 200, 200, 200, 0, 200, 200),\n            ///\n            new ItemText(\"Holes\", \"200px Arial\", \"purple\", 10, 160),\n            new ItemText(\"When a enemy goes over a\", \"60px Arial\", \"rgb(2, 0, 139)\", 10, 300),\n            new ItemText(\"uncovered hole they go the\", \"60px Arial\", \"rgb(2, 0, 139)\", 10, 375),\n            new ItemText(\"opposite way.\", \"60px Arial\", \"rgb(2, 0, 139)\", 10, 450)\n        ], LockedFeature.infoHole)\n        this.slides = [titleSlide, slide1, slide2]\n\n    }\n};\n\n//# sourceURL=webpack://cube-adventure/./ItemInfo.js?");

/***/ }),

/***/ "./Keydown.js":
/*!********************!*\
  !*** ./Keydown.js ***!
  \********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Keydown\": () => (/* binding */ Keydown)\n/* harmony export */ });\n\nconst {GameState, GameMode, ShopMode, PlayerStyles, BackgroundStyles, cubeStyle, gameStates, levelTools} = __webpack_require__ (/*! ./GameData */ \"./GameData.js\")\nconst {draw} = __webpack_require__(/*! ./Draw */ \"./Draw.js\")\n\nfunction Keydown(event) {\n    //console.log(event)\n    // Start Game \"Menu\"\n    if ((event.key === \" \" || event.key === \"Enter\") && gameStates.currentGameState === GameState.NotStarted) {\n        gameStates.SetGameState(GameState.Menu)\n        return\n    }\n\n///\n    // Down \"Menu\"\n    if ((event.keyCode === 40 || event.key === \"s\") && gameStates.currentGameState === GameState.Menu)\n        gameStates.menuController.MainMenu.moveDown()\n\n    // Up \"Menu\"\n    if ((event.keyCode === 38 || event.key === \"w\") && gameStates.currentGameState === GameState.Menu)\n        gameStates.menuController.MainMenu.moveUp()\n    \n    if ((event.key === \" \" || event.key === \"Enter\") && gameStates.currentGameState === GameState.Menu) {\n        gameStates.menuController.MainMenu.selected() \n        return\n    }\n///\n    // Down \"Shop\"\n    if ((event.keyCode === 40 || event.key === \"s\") && gameStates.currentGameState === GameState.Rules && gameStates.currentGameMode === GameMode.Shop)\n        gameStates.menuController.ShopMenu.moveDown()\n\n\n    // Up \"Shop\"\n    if ((event.keyCode === 38 || event.key === \"w\") && gameStates.currentGameState === GameState.Rules && gameStates.currentGameMode === GameMode.Shop)\n        gameStates.menuController.ShopMenu.moveUp()\n///\n\n    if ((event.key === \" \" || event.key === \"Enter\") && gameStates.currentGameState === GameState.Rules && gameStates.currentGameMode === GameMode.Shop) {\n        gameStates.menuController.ShopMenu.selected()\n        return\n    }\n///\n    // Down \"Shop Backround\"   \n    if ((event.keyCode === 40 || event.key === \"s\") && gameStates.currentBackgroundStyle < 2 && gameStates.currentGameState === GameState.Started && gameStates.currentShopMode === ShopMode.Backround && gameStates.currentGameMode === GameMode.Shop)\n        gameStates.currentBackgroundStyle = gameStates.currentBackgroundStyle + 1\n\n    // Up \"Shop Backround\"\n    if ((event.keyCode === 38 || event.key === \"w\") && gameStates.currentBackgroundStyle != 1 && gameStates.currentGameState === GameState.Started && gameStates.currentShopMode === ShopMode.Backround && gameStates.currentGameMode === GameMode.Shop)\n        gameStates.currentBackgroundStyle = gameStates.currentBackgroundStyle - 1\n    \n    if ((event.key === \" \" || event.key === \"Enter\") && gameStates.currentGameState === GameState.Started && gameStates.currentGameMode === GameMode.Shop && gameStates.currentShopMode === ShopMode.Backround) {\n        \n        if (gameStates.currentBackgroundStyle === BackgroundStyles.Plastic) {\n            draw.spriteStyle = false\n            draw.plasticStyle = true\n        }\n\n        if (gameStates.currentBackgroundStyle === BackgroundStyles.Sprite) {\n            draw.plasticStyle = false\n            draw.spriteStyle = true\n        }\n        \n        return\n    }\n    // Down \"Shop Player\"   \n    if ((event.keyCode === 40 || event.key === \"s\") && gameStates.currentPlayerStyle < 5 && gameStates.currentGameState === GameState.Started && gameStates.currentShopMode === ShopMode.Player && gameStates.currentGameMode === GameMode.Shop)\n        gameStates.currentPlayerStyle = gameStates.currentPlayerStyle + 1\n\n    // Up \"Shop Player\"\n    if ((event.keyCode === 38 || event.key === \"w\") && gameStates.currentPlayerStyle != 1 && gameStates.currentGameState === GameState.Started && gameStates.currentShopMode === ShopMode.Player && gameStates.currentGameMode === GameMode.Shop)\n        gameStates.currentPlayerStyle = gameStates.currentPlayerStyle - 1\n    \n    if ((event.key === \" \" || event.key === \"Enter\") && gameStates.currentGameState === GameState.Started && gameStates.currentGameMode === GameMode.Shop && gameStates.currentShopMode === ShopMode.Player) {\n        \n        if (gameStates.currentPlayerStyle === PlayerStyles.BlueCube) {\n            gameStates.currentCubeStyle = cubeStyle.BlueCube\n        }\n        \n        else if (gameStates.currentPlayerStyle === PlayerStyles.BlueCubeAlien && draw.blueCubeAlienLock === false) {\n            gameStates.currentCubeStyle = cubeStyle.Alien   \n        }\n        \n        else if (gameStates.currentPlayerStyle === PlayerStyles.BlueCubeLava) {\n            gameStates.currentCubeStyle = cubeStyle.Lava\n        }\n        \n        else if (gameStates.currentPlayerStyle === PlayerStyles.BlueCubeWooden && draw.blueCubeWoodenLock === false) {\n            gameStates.currentCubeStyle = cubeStyle.Wooden \n        } \n\n        else if (gameStates.currentPlayerStyle === PlayerStyles.BlueCubeSad && draw.blueCubeSadLock === false) {\n            gameStates.currentCubeStyle = cubeStyle.Sad \n        } \n        \n        return\n    }\n///\n    // Down \"Freeplay\"   \n    if ((event.keyCode === 40 || event.key === \"s\") && gameStates.currentLevelIndex < gameStates.levelController.levels.length - 1 && gameStates.currentGameState === GameState.Rules && gameStates.currentGameMode === GameMode.Freeplay)\n        gameStates.currentLevelIndex = gameStates.currentLevelIndex + 1\n\n    // Up \"Freeplay\"\n    if ((event.keyCode === 38 || event.key === \"w\") && gameStates.currentLevelIndex != 0 && gameStates.currentGameState === GameState.Rules && gameStates.currentGameMode === GameMode.Freeplay)\n        gameStates.currentLevelIndex = gameStates.currentLevelIndex - 1\n\n///\n    if (gameStates.currentGameMode === GameMode.ItemsInfo) {\n        gameStates.infoController.Keydown(event)\n    }\n///\n    \n    if (event.key === \"Backspace\" && (gameStates.currentGameState <= 2 && gameStates.currentGameState > 0 || gameStates.currentGameState === 3 && gameStates.currentGameMode != GameMode.StoryMode)) {           \n        \n        if (gameStates.currentGameMode === GameMode.Freeplay) {\n            levelTools.Restart()\n            gameStates.currentLevelIndex = gameStates.infoController.unlockedLevel\n            levelTools.Restart()   \n        }\n        \n        else if (gameStates.currentShopMode > 1) {\n            gameStates.currentShopMode = ShopMode.ShopMenu   \n        }      \n        gameStates.SetGameState(gameStates.currentGameState - 1)\n        return\n    }\n\n    // Rules to Game\n    if ((event.key === \" \" || event.key === \"Enter\") && gameStates.currentGameState === GameState.Rules && gameStates.currentGameMode < 3) {\n        gameStates.SetGameState(GameState.Started)\n        return\n    }\n    // Game to Pause Menu\n    if ((event.key === \" \" || event.key === \"Enter\") && gameStates.currentGameState === GameState.Started && gameStates.currentGameMode === GameMode.StoryMode) {\n        gameStates.SetGameState(GameState.Paused)\n        return\n    }\n\n    if (gameStates.currentGameState === GameState.Lost && gameStates.currentGameMode === GameMode.Freeplay) {\n        levelTools.Restart()\n        gameStates.currentGameState = GameState.Rules\n    }\n\n    if (gameStates.currentGameMode === GameMode.StoryMode) {\n        // Down \"Pause Menu\"\n        if ((event.keyCode === 40 || event.key === \"s\") && gameStates.currentGameState === GameState.Paused)\n            gameStates.menuController.PauseMenu.moveDown()\n\n\n        // Up \"Pause Menu\"\n        if ((event.keyCode === 38 || event.key === \"w\") && gameStates.currentGameState === GameState.Paused)\n            gameStates.menuController.PauseMenu.moveUp()\n\n        if ((event.key === \" \" || event.key === \"Enter\") && gameStates.currentGameState === GameState.Paused) {\n            gameStates.menuController.PauseMenu.selected()\n            return\n        }\n\n        // Down \"Win\"\n        if ((event.keyCode === 40 || event.key === \"s\") && gameStates.currentGameState === GameState.WonStage)\n            gameStates.menuController.WinMenu.moveDown()\n\n\n        // Up \"Win\"\n        if ((event.keyCode === 38 || event.key === \"w\") && gameStates.currentGameState === GameState.WonStage)\n            gameStates.menuController.WinMenu.moveUp()\n\n        if ((event.key === \" \" || event.key === \"Enter\") && gameStates.currentGameState === GameState.WonStage) {\n            gameStates.menuController.WinMenu.selected()\n            return\n        }\n\n        // Down \"Lost\"\n        if ((event.keyCode === 40 || event.key === \"s\") && gameStates.currentGameState === GameState.Lost)\n            gameStates.menuController.LoseMenu.moveDown()\n\n        // Up \"Lost\"\n        if ((event.keyCode === 38 || event.key === \"w\") && gameStates.currentGameState === GameState.Lost)\n            gameStates.menuController.LoseMenu.moveUp()\n\n        if ((event.key === \" \" || event.key === \"Enter\") && gameStates.currentGameState === GameState.Lost && gameStates.currentGameMode === GameMode.StoryMode) {\n            gameStates.menuController.LoseMenu.selected()\n            return\n        }\n        \n    \n    }\n///\n    if (gameStates.currentGameState !== GameState.Started || gameStates.currentGameMode === GameMode.Shop) {\n        return\n    }\n\n    //console.log('key pressed/')\n        // \"Right\" Arrow || \"d\" Key\n    gameStates.CurrentLevel().players.forEach(function(player) {    \n        if ((event.keyCode === 39 || event.key === \"d\") && player.x < 800)\n        player.moveRight()\n        return\n    })\n    \n        // \"Down\" Arrow || \"s\" Key\n    gameStates.CurrentLevel().players.forEach(function(player) {    \n        if ((event.keyCode === 40 || event.key === \"s\") && player.y < 550)\n        player.moveDown()\n        return\n    })\n    \n        // \"Up\" Arrow || \"w\" Key\n    gameStates.CurrentLevel().players.forEach(function(player) {    \n        if ((event.keyCode === 38 || event.key === \"w\") && player.y !== 0)\n        player.moveUp()\n        return\n    })\n    \n        // \"Left\" Arrow || \"a\" Key\n    gameStates.CurrentLevel().players.forEach(function(player) {\n        if ((event.keyCode === 37 || event.key === \"a\") && player.x !== 0)\n        player.moveLeft()\n        return\n    })       \n}\n\n\n\n//# sourceURL=webpack://cube-adventure/./Keydown.js?");

/***/ }),

/***/ "./Levels.js":
/*!*******************!*\
  !*** ./Levels.js ***!
  \*******************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"LevelController\": () => (/* binding */ LevelController)\n/* harmony export */ });\n\nconst {\n    Player,\n    Enemy,\n    Wall,\n    Item,\n    Rock,\n    Water,\n    Hole,\n    ChangeDirectionSquare,\n    FinishArea,\n    Unlock,\n    Teleporter\n} = __webpack_require__(/*! ./Class */ \"./Class.js\")\n\nclass Level {\n  constructor(levelData) {\n      this.players = levelData.players ?? []\n      this.enemies = levelData.enemies ?? []\n      this.walls = levelData.walls ?? []\n      this.waters = levelData.waters ?? []\n      this.items = levelData.items ?? []\n      this.rocks = levelData.rocks ?? []\n      this.holes = levelData.holes ?? []\n      this.finishAreas = levelData.finishAreas ?? []\n      this.changeDirectionSquares = levelData.changeDirectionSquares ?? []\n      this.unlocks = levelData.unlocks ?? []\n      this.teleporters = levelData.teleporters ?? []\n  }\n}\n\nclass LevelController {\n    constructor() {\n        this.levels = []\n    }\n\n    createLevels() {\n      // Level 1\n      this.levels.push(new Level({\n        players: [\n            new Player(400, 0, 50, 50),\n        ],\n        enemies: [\n            new Enemy(800, 400, 50, 50, false, true, false, false, 5),\n            new Enemy(0, 200, 50, 50, true, false, false, false, 5),\n        ],\n        finishAreas: [\n            new FinishArea(0, 550, 850, 50), \n        ]\n      }))\n\n      // Level 2\n      this.levels.push(new Level({\n        players: [\n            new Player(400, 0, 50, 50),\n        ],\n        enemies: [\n            new Enemy(400, 500, 50, 50, false, false, true, false, 3),\n        ],\n        walls: [\n            new Wall(0, 0, 350, 600, \"rgb(190, 190, 190)\"),\n            new Wall(500, 0, 350, 600, \"rgb(190, 190, 190)\"),\n            ///\n            new Wall(350, 100, 50, 50, \"rgb(190, 190, 190)\"),\n            new Wall(350, 250, 50, 200, \"rgb(190, 190, 190)\"),\n            ///\n            new Wall(450, 100, 50, 200, \"rgb(190, 190, 190)\"),\n            new Wall(450, 400, 50, 50, \"rgb(190, 190, 190)\")\n        ],    \n        finishAreas: [\n            new FinishArea(350, 550, 150, 50),\n        ]\n      }))\n\n      // Level 3\n      this.levels.push(new Level({\n        players: [\n            new Player(400, 0, 50, 50),\n        ],\n        enemies: [\n            new Enemy(200, 450, 50, 50, true, false, false, false, 4),\n            new Enemy(400, 350, 50, 50, true, true, false, false, 2.5),\n            new Enemy(600, 50, 50, 50, false, true, false, false, 4),\n        ],\n        walls: [\n            new Wall(0, 0, 200, 550, \"rgb(190, 190, 190)\"),\n            new Wall(650, 0, 200, 550, \"rgb(190, 190, 190)\"),\n            ///\n            new Wall(200, 0, 150, 50, \"rgb(190, 190, 190)\"),\n            new Wall(500, 0, 150, 50, \"rgb(190, 190, 190)\"),\n            ///\n            new Wall(500, 100, 150, 50, \"rgb(190, 190, 190)\"),\n            new Wall(200, 100, 150, 50, \"rgb(190, 190, 190)\"),\n            ///\n            new Wall(350, 200, 150, 150, \"rgb(190, 190, 190)\"),\n            new Wall(550, 150, 100, 250, \"rgb(190, 190, 190)\"),\n            new Wall(200, 150, 100, 250, \"rgb(190, 190, 190)\"),\n            ///\n            new Wall(0, 550, 350, 50, \"rgb(190, 190, 190)\"),\n            new Wall(500, 550, 350, 50, \"rgb(190, 190, 190)\"),\n            ///\n            new Wall(200, 400, 150, 50, \"rgb(190, 190, 190)\"),\n            new Wall(500, 400, 150, 50, \"rgb(190, 190, 190)\"),\n            ///\n            new Wall(200, 500, 150, 50, \"rgb(190, 190, 190)\"),\n            new Wall(500, 500, 150, 50, \"rgb(190, 190, 190)\"),\n        ],\n        finishAreas: [\n            new FinishArea(350, 550, 150, 50),\n        ],\n        changeDirectionSquares: [\n            new ChangeDirectionSquare(300, 150, 50, 50, false, true, false, true, true),\n            ///\n            new ChangeDirectionSquare(500, 150, 50, 50, true, false, false, true, true),  \n            ///\n            new ChangeDirectionSquare(300, 350, 50, 50, true, false, true, false, true),  \n            ///\n            new ChangeDirectionSquare(500, 350, 50, 50, false, true, true, false, true),    \n        ],\n      }))\n\n      // Level 4\n      this.levels.push(new Level({\n        players: [\n            new Player(100, 100, 50, 50),\n        ],\n        enemies: [\n            new Enemy(400, 50, 50, 50, true, true, false, false, 3),\n            ///\n            new Enemy(300, 300, 50, 50, true, false, false, false, 2.5),\n            new Enemy(300, 500, 50, 50, true, false, false, false, 2.5),\n            ///\n            new Enemy(500, 300, 50, 50, false, true, false, false, 2.5),\n            new Enemy(500, 500, 50, 50, false, true, false, false, 2.5),\n        ],\n        walls: [\n            new Wall(0, 0, 850, 50, \"rgb(190, 190, 190)\"),\n            ///\n            new Wall(0, 50, 100, 550, \"rgb(190, 190, 190)\"),\n            new Wall(750, 50, 100, 550, \"rgb(190, 190, 190)\"),\n            ///\n            new Wall(150, 100, 250, 50, \"rgb(190, 190, 190)\"),\n            new Wall(450, 100, 250, 50, \"rgb(190, 190, 190)\"),\n            ///\n            new Wall(0, 150, 400, 50, \"rgb(190, 190, 190)\"),\n            new Wall(450, 150, 400, 50, \"rgb(190, 190, 190)\"),\n            ///\n            new Wall(350, 200, 50, 350, \"rgb(190, 190, 190)\"),\n            new Wall(450, 200, 50, 350, \"rgb(190, 190, 190)\"),\n        ],\n        rocks: [\n            new Rock(400, 500, 50, 50, \"lightblue\", \"aqua\", \"4Blue\", false, 1, 1)\n        ],\n        finishAreas: [\n            new FinishArea(100, 200, 250, 50),\n            new FinishArea(500, 200, 250, 50),\n        ],\n        unlocks: [\n            new Unlock(700, 100, 50, 50, \"rgb(180, 180, 180)\", \"lightblue\", \"aqua\", \"4Blue\", 1)\n        ],\n      }))\n\n      // Level 5\n      this.levels.push(new Level({\n        players: [\n            new Player(150, 150, 50, 50),\n        ],\n        enemies: [\n            new Enemy(50, 500, 50, 50, false, false, true, false, 2.5),\n            new Enemy(500, 150, 50, 50, false, true, false, false, 2.5),\n            new Enemy(500, 300, 50, 50, false, true, false, false, 2.5),\n            new Enemy(500, 450, 50, 50, false, true, false, false, 2.5),\n        ],\n        walls: [\n            // Side Walls\n            new Wall(0, 550, 850, 50, \"rgb(190, 190, 190)\"),\n            new Wall(0, 0, 850, 50, \"rgb(190, 190, 190)\"),\n            ///\n            new Wall(100, 100, 50, 50, \"rgb(190, 190, 190)\"),\n            new Wall(100, 200, 50, 400, \"rgb(190, 190, 190)\"),\n            /// \n            new Wall(100, 150, 50, 50, \"rgba(190, 190, 190, 0.9)\", true, true),\n            ///\n            new Wall(400, 100, 50, 100, \"rgb(190, 190, 190)\"),\n            new Wall(400, 200, 50, 350, \"rgb(190, 190, 190)\"),\n            ///\n            new Wall(450, 100, 50, 450, \"rgb(190, 190, 190)\"),\n            ///\n            new Wall(150, 100, 300, 50, \"rgb(190, 190, 190)\"),\n            ///\n            new Wall(0, 50, 50, 500, \"rgb(190, 190, 190)\"),\n            ///\n            new Wall(700, 50, 50, 100, \"rgb(190, 190, 190)\"),\n            new Wall(700, 200, 50, 100, \"rgb(190, 190, 190)\"),\n            new Wall(700, 350, 50, 100, \"rgb(190, 190, 190)\"),\n            new Wall(700, 500, 50, 50, \"rgb(190, 190, 190)\"),\n            ///\n            new Wall(700, 450, 50, 50, \"rgba(190, 190, 190, 0.9)\", true, true),\n            new Wall(700, 300, 50, 50, \"rgba(190, 190, 190, 0.9)\", true, true),\n            new Wall(700, 150, 50, 50, \"rgba(190, 190, 190, 0.9)\", true, true),\n            ///\n            new Wall(800, 50, 50, 500, \"rgb(190, 190, 190)\",),\n        ],\n        rocks: [\n            new Rock(300, 150, 50, 50, \"lightblue\", \"aqua\", \"5Blue\", false, 1, 1),\n            new Rock(350, 200, 50, 50, \"lightblue\", \"aqua\", \"5Blue\", false, 1, 1),\n            new Rock(450, 50, 50, 50, \"plum\", \"orchid\", \"5Purple\", false, 2, 1)\n        ],\n        finishAreas: [\n            new FinishArea(750, 50, 50, 500),\n        ],\n        changeDirectionSquares: [\n            new ChangeDirectionSquare(50, 50, 50, 50, true, false, true, false, true)\n        ],\n        unlocks: [\n            new Unlock(150, 500, 50, 50, \"rgb(180, 180, 180)\", \"lightblue\", \"aqua\", \"5Blue\", 1),\n            new Unlock(350, 150, 50, 50, \"rgb(180, 180, 180)\", \"plum\", \"orchid\", \"5Purple\", 2)            \n        ]\n      }))\n\n      // Level 6\n      var level6_teleporter1 = new Teleporter(50, 500, undefined, 50, 50, 1)\n      var level6_teleporter2 = new Teleporter(250, 300, level6_teleporter1, 50, 50, 1)\n      level6_teleporter1.otherTeleporter = level6_teleporter2\n      this.levels.push(new Level({\n        players: [ \n            new Player(50, 50, 50, 50),\n        ],\n        enemies: [\n            new Enemy(700, 500, 50, 50, true, false, false, false, 2),    \n        ],\n        walls: [\n            new Wall(0, 0, 850, 50, \"rgb(190, 190, 190)\"),\n            new Wall(0, 550, 850, 50, \"rgb(190, 190, 190)\"),\n            new Wall(800, 50, 50, 500, \"rgb(190, 190, 190)\"),\n            ///\n            new Wall(0, 50, 50, 550, \"rgb(190, 190, 190)\"),\n            ///\n            new Wall(100, 50, 50, 250, \"rgb(190, 190, 190)\"),\n            new Wall(100, 350, 50, 250, \"rgb(190, 190, 190)\"),\n            ///\n            new Wall(200, 50, 50, 550, \"rgb(190, 190, 190)\"),\n            ///\n            new Wall(250, 50, 50, 250, \"rgb(190, 190, 190)\"),\n            new Wall(250, 350, 50, 200, \"rgb(190, 190, 190)\"),\n            ///\n            new Wall(300, 50, 50, 250, \"rgb(190, 190, 190)\"),\n            ///\n            new Wall(350, 50, 50, 450, \"rgb(190, 190, 190)\"),\n            ///\n            new Wall(400, 50, 50, 250, \"rgb(190, 190, 190)\"),\n            new Wall(450, 350, 50, 200, \"rgb(190, 190, 190)\"),\n            ///\n            new Wall(500, 150, 50, 400, \"rgb(190, 190, 190)\"),\n            ///\n            new Wall(550, 150, 200, 50, \"rgb(190, 190, 190)\"),\n            new Wall(500, 100, 250, 50, \"rgb(190, 190, 190)\"),\n            ///\n            new Wall(600, 250, 200, 250, \"rgb(190, 190, 190)\"),\n            ///\n            new Wall(750, 500, 50, 50, \"rgb(190, 190, 190)\"),\n        ],\n        rocks: [\n            new Rock(100, 300, 50, 50, \"plum\", \"orchid\", \"6Purple\", false, 2, 1),\n            new Rock(650, 500, 50, 50, \"plum\", \"orchid\", \"6Purple\", false, 2, 1)\n        ],\n        finishAreas: [\n            new FinishArea(150, 50, 50, 500),\n        ],\n        changeDirectionSquares: [\n            // Right Side\n            new ChangeDirectionSquare(550, 500, 50, 50, false, true, true, false, true),\n            ///\n            new ChangeDirectionSquare(550, 200, 50, 50, false, true, false, true, true),\n            ///\n            new ChangeDirectionSquare(750, 200, 50, 50, true, false, true, false, true),\n            ///\n            new ChangeDirectionSquare(750, 50, 50, 50, true, false, false, true, true),\n            // Left Side\n            new ChangeDirectionSquare(450, 50, 50, 50, false, true, false, true, true),\n            ///\n            new ChangeDirectionSquare(450, 300, 50, 50, true, false, true, false, true),\n            ///\n            new ChangeDirectionSquare(400, 300, 50, 50, false, true, false, true, true),\n            ///\n            new ChangeDirectionSquare(400, 500, 50, 50, true, false, true, false, true),\n            ///\n            new ChangeDirectionSquare(300, 500, 50, 50, false, true, true, false, true)    \n        ],\n        unlocks: [\n            new Unlock(550, 500, 50, 50, \"rgb(180, 180, 180)\", \"plum\", \"orchid\", \"6Purple\", 2)\n        ],\n        teleporters: [\n            level6_teleporter1,\n            level6_teleporter2\n        ],\n      }))\n\n      // Level 7\n      var level7_teleporter1 = new Teleporter(150, 500, undefined, 50, 50, 2)\n      var level7_teleporter2 = new Teleporter(650, 50, level7_teleporter1, 50, 50, 2)\n      level7_teleporter1.otherTeleporter = level7_teleporter2\n      this.levels.push(new Level({\n        players: [ \n            new Player(150, 50, 50, 50),\n        ],\n        enemies: [\n            new Enemy(250, 100, 50, 50, true, false, false, false, 2.5),\n            new Enemy(50, 250, 50, 50, false, true, false, false, 3),\n            new Enemy(250, 400, 50, 50, true, false, false, false, 2.5),\n        ],\n        walls: [\n            new Wall(0, 0, 50, 600, \"rgb(190, 190, 190)\"),\n            new Wall(50, 0, 250, 50, \"rgb(190, 190, 190)\"),\n            new Wall(50, 550, 250, 50, \"rgb(190, 190, 190)\"),\n            ///\n            new Wall(50, 50, 50, 50, \"rgb(190, 190, 190)\"),\n            new Wall(50, 150, 50, 100, \"rgb(190, 190, 190)\"),\n            new Wall(50, 300, 50, 100, \"rgb(190, 190, 190)\"),\n            new Wall(50, 450, 50, 100, \"rgb(190, 190, 190)\"),\n            ///\n            new Wall(250, 50, 50, 50, \"rgb(190, 190, 190)\"),\n            new Wall(250, 150, 50, 100, \"rgb(190, 190, 190)\"),\n            new Wall(250, 300, 50, 100, \"rgb(190, 190, 190)\"),\n            new Wall(250, 450, 50, 100, \"rgb(190, 190, 190)\"),\n            ///\n            new Wall(300, 0, 50, 100, \"rgb(190, 190, 190)\"),\n            new Wall(300, 150, 50, 100, \"rgb(190, 190, 190)\"),\n            new Wall(300, 300, 50, 100, \"rgb(190, 190, 190)\"),\n            new Wall(300, 450, 50, 150, \"rgb(190, 190, 190)\"),\n            ///\n            new Wall(800, 50, 50, 150, \"rgb(190, 190, 190)\"),\n            new Wall(800, 350, 50, 250, \"rgb(190, 190, 190)\"),\n            ///\n            new Wall(700, 50, 100, 50, \"rgb(190, 190, 190)\"),\n            new Wall(650, 100, 50, 50, \"rgb(190, 190, 190)\"),\n            new Wall(600, 150, 50, 100, \"rgb(190, 190, 190)\"),\n            new Wall(450, 350, 50, 100, \"rgb(190, 190, 190)\"),\n            new Wall(400, 400, 50, 150, \"rgb(190, 190, 190)\"),\n            new Wall(350, 500, 50, 100, \"rgb(190, 190, 190)\"),\n            ///\n            new Wall(500, 500, 50, 100, \"rgb(190, 190, 190)\"),\n            new Wall(550, 450, 50, 150, \"rgb(190, 190, 190)\"),\n            new Wall(600, 400, 50, 200, \"rgb(190, 190, 190)\"),\n            new Wall(650, 400, 50, 50, \"rgb(190, 190, 190)\"),\n            new Wall(700, 500, 50, 100, \"rgb(190, 190, 190)\"),\n            new Wall(750, 450, 50, 150, \"rgb(190, 190, 190)\"),\n            ///\n            new Wall(700, 100, 50, 50, \"rgb(190, 190, 190)\"),\n            new Wall(650, 150, 50, 50, \"rgb(190, 190, 190)\"),\n            ///\n            new Wall(450, 50, 150, 50, \"rgb(190, 190, 190)\"),\n            new Wall(550, 0, 300, 50, \"rgb(190, 190, 190)\"),\n            new Wall(450, 100, 100, 50, \"rgb(190, 190, 190)\"),\n            new Wall(400, 100, 100, 50, \"rgb(190, 190, 190)\"),\n            new Wall(350, 0, 50, 50, \"rgb(190, 190, 190)\"),\n            new Wall(350, 150, 100, 50, \"rgb(190, 190, 190)\"),\n        ],\n        waters: [\n            new Water(700, 100, 100, 500, \"rgb(0, 175, 235)\"),\n            new Water(650, 150, 50, 450, \"rgb(0, 175, 235)\"),\n            new Water(600, 250, 50, 350, \"rgb(0, 175, 235)\"),\n            ///\n            new Water(550, 300, 50, 300, \"rgb(0, 175, 235)\"),\n            new Water(500, 350, 50, 250, \"rgb(0, 175, 235)\"),\n            new Water(450, 450, 50, 150, \"rgb(0, 175, 235)\"),\n            new Water(400, 550, 50, 50, \"rgb(0, 175, 235)\"),      \n        ],\n        items: [\n            new Item(500, 0, 50, 50, 1), \n        ],\n        rocks: [\n            new Rock(300, 100, 50, 50, \"lightblue\", \"aqua\", \"7Blue\", false, 1, 1),\n            new Rock(300, 250, 50, 50, \"lightblue\", \"aqua\", \"7Blue\", false, 1, 1),\n            new Rock(300, 400, 50, 50, \"lightblue\", \"aqua\", \"7Blue\", false, 1, 1),\n        ],\n        finishAreas: [\n            new FinishArea(800, 200, 50, 150),\n        ],\n        unlocks: [\n            new Unlock(350, 450, 50, 50, \"rgb(180, 180, 180)\", \"lightblue\", \"aqua\", \"7Blue\", 1),\n        ],\n        teleporters: [\n          level7_teleporter1,\n          level7_teleporter2\n        ],\n      }))\n\n      // Level 8\n      this.levels.push(new Level({\n        players: [ \n            new Player(100, 250, 50, 50),\n        ],\n        enemies: [\n            new Enemy(500, 200, 50, 50, true, false, false, false, 2.5),\n            /// Pink Switch Puzzle\n            new Enemy(450, 300, 50, 50, false, false, false, true, 2),\n            new Enemy(550, 300, 50, 50, false, false, false, true, 2),\n            new Enemy(650, 300, 50, 50, false, false, false, true, 2),\n            /// Blue Switch Puzzle\n            new Enemy(750, 0, 50, 50, true, false, false, false, 2.25)\n        ],\n        walls: [\n            new Wall(0, 550, 800, 50, \"rgb(190, 190, 190)\"),\n            new Wall(800, 0, 50, 600, \"rgb(190, 190, 190)\"),\n            // Water Walls\n            new Wall(50, 150, 100, 50, \"rgb(190, 190, 190)\"),\n            new Wall(100, 100, 100, 50, \"rgb(190, 190, 190)\"),\n            new Wall(150, 50, 50, 50, \"rgb(190, 190, 190)\"),\n            new Wall(200, 50, 50, 50, \"rgba(190, 190, 190, 0.9)\", true, true),\n            new Wall(250, 0, 50, 100, \"rgb(190, 190, 190)\"),\n            /// Middle\n            new Wall(0, 200, 350, 50, \"rgb(190, 190, 190)\"),\n            new Wall(550, 150, 200, 50, \"rgb(190, 190, 190)\"),\n            /// Bottom\n            new Wall(0, 300, 300, 50, \"rgb(190, 190, 190)\"),\n            new Wall(400, 250, 400, 50, \"rgb(190, 190, 190)\"),\n            /// Pink Switch Puzzle Entrance\n            new Wall(200, 350, 100, 100, \"rgb(190, 190, 190)\"),\n            new Wall(350, 300, 100, 100, \"rgb(190, 190, 190)\"),\n            new Wall(350, 400, 100, 50, \"rgba(190, 190, 190, 0.9)\", true, true),\n            new Wall(350, 450, 100, 100, \"rgb(190, 190, 190)\"),\n            /// Life Jacket Puzzle\n            new Wall(50, 550, 250, 50, \"rgb(190, 190, 190)\"),\n            new Wall(100, 500, 250, 50, \"rgb(190, 190, 190)\"),\n            new Wall(0, 350, 50, 200, \"rgb(190, 190, 190)\"),\n            new Wall(100, 400, 50, 50, \"rgb(190, 190, 190)\"),\n            ///\n            new Wall(150, 400, 50, 50, \"rgba(190, 190, 190, 0.9)\", true, true),\n            new Wall(50, 350, 150, 50, \"rgba(190, 190, 190, 0.9)\", true, true),\n            new Wall(50, 400, 50, 50, \"rgba(190, 190, 190, 0.9)\", true, true),\n            /// Pink Switch Puzzle\n            // Row 1\n            new Wall(500, 450, 50, 50, \"rgb(190, 190, 190)\"),\n            new Wall(600, 450, 50, 50, \"rgb(190, 190, 190)\"),\n            // Row 2\n            new Wall(500, 350, 50, 50, \"rgb(190, 190, 190)\"),\n            new Wall(600, 350, 50, 50, \"rgb(190, 190, 190)\"),\n            // Pathway Walls\n            new Wall(700, 350, 50, 150, \"rgb(190, 190, 190)\"),\n            /// Blue Switch Puzzle\n            new Wall(350, 50, 200, 50, \"rgb(190, 190, 190)\"),\n            new Wall(350, 100, 150, 50, \"rgb(190, 190, 190)\"),\n            new Wall(300, 150, 200, 50, \"rgb(190, 190, 190)\"),\n            new Wall(550, 50, 50, 50, \"rgba(190, 190, 190, 0.9)\", true, true),\n            new Wall(600, 50, 200, 50, \"rgb(190, 190, 190)\"),\n            //\n            new Wall(300, 50, 50, 50, \"rgba(190, 190, 190, 0.9)\", true, true),\n        ],\n        waters: [\n            new Water(-50, -50, 150, 200, \"rgb(0, 175, 235)\"),\n            new Water(100, -50, 50, 150, \"rgb(0, 175, 235)\"),\n            new Water(150, -50, 100, 100, \"rgb(0, 175, 235)\"),\n        ],\n        items: [\n            new Item(50, 500, 50, 50, 1),\n            new Item(0, 150, 50, 50, 2)      \n        ],\n        rocks: [\n            new Rock(550, 100, 50, 50, \"plum\", \"orchid\", \"8Purple\", false, 2, 1),\n            new Rock(50, 250, 50, 50, \"lightblue\", \"aqua\", \"8Blue\", false, 1, 1),\n        ],\n        holes: [\n            new Hole(550, 200, 50, 50, false, 0, 1),\n            /// Life Jacket Puzzle\n            new Hole(200, 450, 50, 50, false, 0, 2),\n            new Hole(150, 450, 50, 50, false, 0, 2),\n            new Hole(100, 450, 50, 50, false, 0, 1),\n            ///\n            new Hole(150, 400, 50, 50, false, 0, 1),\n            new Hole(150, 350, 50, 50, false, 0, 1),\n            new Hole(100, 350, 50, 50, false, 0, 1),\n            new Hole(50, 350, 50, 50, false, 0, 1),\n            new Hole(50, 400, 50, 50, false, 0, 1),\n            /// Pink Switch Puzzle\n            new Hole(700, 500, 50, 50, false, 0, 1),\n            new Hole(700, 300, 50, 50, false, 0, 1),\n        ],\n        finishAreas: [\n            new FinishArea(0, 250, 50, 50),\n        ],\n        changeDirectionSquares: [\n            new ChangeDirectionSquare(750, 200, 50, 50, true, false, true, false, true),\n            new ChangeDirectionSquare(750, 100, 50, 50, true, false, false, true, true),\n            new ChangeDirectionSquare(500, 100, 50, 50, false, true, false, true, true),\n            new ChangeDirectionSquare(500, 200, 50, 50, true, false, true, false, false, \"8Purple\"),\n        ],\n        unlocks: [\n            new Unlock(750, 400, 50, 50, \"rgb(180, 180, 180)\", \"plum\", \"orchid\", \"8Purple\", 2),\n            new Unlock(150, 150, 50, 50, \"rgb(180, 180, 180)\", \"lightblue\", \"aqua\", \"8Blue\", 1)\n        ]\n      }))\n    }\n}\n\n//# sourceURL=webpack://cube-adventure/./Levels.js?");

/***/ }),

/***/ "./Menu.js":
/*!*****************!*\
  !*** ./Menu.js ***!
  \*****************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"MenuController\": () => (/* binding */ MenuController),\n/* harmony export */   \"menusVaribles\": () => (/* binding */ menusVaribles)\n/* harmony export */ });\n\nconst {GameMode, GameState, ShopMode, gameStates, levelTools} = __webpack_require__(/*! ./GameData */ \"./GameData.js\")\nconst {canvas} = __webpack_require__(/*! ./Canvas */ \"./Canvas.js\")\nvar menusVaribles = {\n    game: undefined\n}\n\nclass MenuItem {\n    constructor(title, value, color, action) {\n        this.title = title\n        this.value = value\n        this.color = color\n        this.action = action\n    }\n}\n\nclass Menu {\n    constructor(menuItems, offsetY, negativeOffsetY) {\n        this.menuItems = menuItems;\n        this.selectedIndex = 0\n        this.offsetY = offsetY\n        this.negativeOffsetY = negativeOffsetY\n    }\n    moveUp() {\n        if (this.selectedIndex !== 0) {\n            this.selectedIndex = this.selectedIndex - 1\n        }  \n    }\n\n    moveDown() {\n        if (this.selectedIndex !== this.menuItems.length - 1) {\n            this.selectedIndex = this.selectedIndex + 1\n        }  \n    }\n\n    selected() {\n        var menuItem = this.menuItems[this.selectedIndex]\n        menuItem.action()\n    }\n\n    Draw(textBody) {\n        var self = this\n        const heightPerItem = (this.negativeOffsetY - this.offsetY) / this.menuItems.length\n        canvas.context.font = '115px Arial'\n        if (textBody !== undefined)\n            textBody()\n        this.menuItems.forEach(function(menuItem, index) {\n            if (index === self.selectedIndex) {\n            canvas.context.fillStyle = \"rgba(128, 128, 128, 0.8)\";\n            canvas.context.fillRect(0, self.offsetY + heightPerItem * index, 850, heightPerItem)\n            gameStates.selectorY = heightPerItem * index + self.offsetY\n            gameStates.selectorYBottom = heightPerItem * (index + 1) + self.offsetY\n            }\n            ///\n            canvas.context.font = '115px Arial'\n            canvas.context.fillStyle = menuItem.color\n            canvas.context.fillText(menuItem.title, 10, 90 + self.offsetY + heightPerItem * index)\n            \n            \n        })\n    }\n}\n\n class MenuController {\n    constructor() {\n        this.menus = []\n        this.menus.push(this.MainMenu = new Menu([\n            new MenuItem(\"Story Mode\", 1, \"rgb(0, 166, 255)\", function() {\n                gameStates.currentGameState = GameState.Rules\n                gameStates.currentGameMode = GameMode.StoryMode\n            }),\n            new MenuItem(\"Freeplay\", 2, \"rgb(0, 132, 216)\", function() {\n                gameStates.currentGameState = GameState.Rules\n                gameStates.currentGameMode = GameMode.Freeplay\n            }),\n            new MenuItem(\"Shop\", 3, \"rgb(0, 67, 190)\",function() {\n                gameStates.currentGameState = GameState.Rules\n                gameStates.currentGameMode = GameMode.Shop\n            }),\n            new MenuItem(\"Items Info\", 4, \"rgb(0, 0, 139)\",function() {\n                gameStates.currentGameState = GameState.Rules\n                gameStates.currentGameMode = GameMode.ItemsInfo\n             }),\n            /*new MenuItem(\"Settings\", 5, \"darkblue\", 0, function() {\n                gameStates.currentGameState = GameState.Rules\n                gameStates.currentGameMode = GameMode.Settings\n            })*/\n        ], 0, 600))\n        \n        this.menus.push(this.ShopMenu = new Menu([\n            new MenuItem(\"Player\", 1, \"lightcoral\", function() {\n                gameStates.currentGameState = GameState.Started\n                gameStates.currentShopMode = ShopMode.Player\n            }),\n            new MenuItem(\"Background\", 2, \"gold\", function() {\n                gameStates.currentGameState = GameState.Started\n                gameStates.currentShopMode =  ShopMode.Backround\n            }),\n        ], 0, 600))\n           \n        this.menus.push(this.LoseMenu = new Menu([\n            new MenuItem(\"Retry\", 1, \"violet\", function() {  \n                gameStates.SetGameState(GameState.Started)\n                levelTools.Restart()\n                levelTools.loseCounterStop = false\n            }),\n            new MenuItem(\"Return to menu\", 2, \"hotpink\", function() {\n                levelTools.Restart()\n                gameStates.currentGameState = GameState.Menu\n                levelTools.loseCounterStop = false\n            })\n        ], 200, 600))\n                    \n        this.menus.push(this.WinMenu = new Menu([\n            new MenuItem(\"Continue\", 1, \"rgb(255, 0, 100)\", function() {\n                levelTools.NextLevel()\n        \n            }),\n            new MenuItem(\"Return to menu\", 2, \"deeppink\", function() {\n                levelTools.NextLevel()\n                gameStates.currentGameState = GameState.Menu\n            }),               \n        ], 200, 600))\n        \n        this.menus.push(this.PauseMenu = new Menu([\n            new MenuItem(\"Resume\", 1, \"rgb(255, 0, 86)\", function() {\n                gameStates.SetGameState(GameState.Started)\n        \n            }),\n            new MenuItem(\"Retry\", 2, \"rgb(255, 105, 0)\", function() {\n                gameStates.SetGameState(GameState.Started)\n                levelTools.Restart()\n            }),\n            new MenuItem(\"Return to menu\", 3, \"rgb(255, 170, 0)\", function() {\n                levelTools.Restart()\n                gameStates.currentGameState = GameState.Menu\n            }),               \n        ], 0, 600))\n    }\n}\n\n\n//# sourceURL=webpack://cube-adventure/./Menu.js?");

/***/ }),

/***/ "./MouseDown.js":
/*!**********************!*\
  !*** ./MouseDown.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"MouseDown\": () => (/* binding */ MouseDown)\n/* harmony export */ });\n\nvar exitNumber = 0\nconst {draw} = __webpack_require__(/*! ./Draw */ \"./Draw.js\")\nconst {GameState, GameMode, ShopMode, PlayerStyles, BackgroundStyles, cubeStyle, gameStates, levelTools} = __webpack_require__ (/*! ./GameData */ \"./GameData.js\")\n\nfunction MouseDown(event) {\n    // Start Game \"Menu\"\n    if (gameStates.currentGameState === GameState.NotStarted && event.offsetY > 500 && event.offsetY < 600 && event.offsetX < 850) {\n        gameStates.SetGameState(GameState.Menu)\n        return\n    }\n    ///\n        function CheckExit() {\n            gameStates.CurrentLevel().players.forEach(function(player) { \n                if (event.offsetX < player.x + 50 && event.offsetX > player.x && event.offsetY < player.y + 50 && event.offsetY > player.y && gameStates.currentGameMode < 3 && gameStates.currentGameState === GameState.Started) {\n                    exitNumber++\n                }\n            })\n            if (exitNumber === 2) {\n                exitNumber = 0\n                return true\n            } else {\n                return false\n            }\n        }\n        ///  \n        if (event.offsetY > 0 && event.offsetY < 100 && event.offsetX < 850 && event.offsetX > 750 && gameStates.currentGameState <= 2 && gameStates.currentGameState > 0 && gameStates.mobile || CheckExit()) {\n            if (gameStates.currentGameMode === GameMode.StoryMode && gameStates.currentGameState === GameState.Started) {\n                gameStates.SetGameState(GameState.Paused)\n                return \n            }\n\n            else if (gameStates.currentGameState <= 3 && gameStates.currentGameState > 0) {\n                gameStates.SetGameState(gameStates.currentGameState - 1)\n            }\n\n            if (gameStates.currentGameMode === GameMode.Freeplay) {\n                levelTools.Restart()\n                gameStates.currentLevelIndex = (gameStates.infoController.unlockedLevel + 1)\n                levelTools.Restart()   \n            }\n        \n            else if (gameStates.currentShopMode > 1) {\n                gameStates.currentShopMode = ShopMode.ShopMenu    \n            }\n            return\n        }\n    ///\n    // Down \"Menu\"\n    if (gameStates.currentGameState === GameState.Menu && event.offsetY > gameStates.selectorYBottom && event.offsetY < 600 && event.offsetX < 850)\n        gameStates.menuController.MainMenu.moveDown()\n\n    // Up \"Menu\"\n    if (gameStates.currentGameState === GameState.Menu && event.offsetY < gameStates.selectorY && event.offsetY < 600 && event.offsetX < 850)\n        gameStates.menuController.MainMenu.moveUp()\n    \n    if (gameStates.currentGameState === GameState.Menu && event.offsetY > gameStates.selectorY && event.offsetY < 600 && event.offsetX < 850 && event.offsetY < gameStates.selectorYBottom) {\n        gameStates.menuController.MainMenu.selected() \n        return\n    }\n\n    ///\n\n    // Down \"Shop\"\n    if (gameStates.currentGameState === GameState.Rules && gameStates.currentGameMode === GameMode.Shop && event.offsetY > gameStates.selectorYBottom && event.offsetX < 850)\n        gameStates.menuController.ShopMenu.moveDown()\n\n    // Up \"Shop\"\n    if (gameStates.currentGameState === GameState.Rules && gameStates.currentGameMode === GameMode.Shop && event.offsetY < gameStates.selectorY && event.offsetX < 850)\n        gameStates.menuController.ShopMenu.moveUp()\n\n    if (gameStates.currentGameState === GameState.Rules && gameStates.currentGameMode === GameMode.Shop && event.offsetY > gameStates.selectorY && event.offsetY < gameStates.selectorYBottom && event.offsetX < 850) {\n        gameStates.menuController.ShopMenu.selected()\n        return\n    }\n\n    ///\n\n    // Down \"Shop Backround\"   \n    if (gameStates.currentBackgroundStyle < 2 && gameStates.currentGameState === GameState.Started && gameStates.currentShopMode === ShopMode.Backround && gameStates.currentGameMode === GameMode.Shop && event.offsetX < 850 && event.offsetX > 690 && event.offsetY > 450 && event.offsetY < 600)\n        gameStates.currentBackgroundStyle = gameStates.currentBackgroundStyle + 1\n\n    // Up \"Shop Backround\"\n    if (gameStates.currentBackgroundStyle != 1 && gameStates.currentGameState === GameState.Started && gameStates.currentShopMode === ShopMode.Backround && gameStates.currentGameMode === GameMode.Shop && event.offsetX < 160 && event.offsetX > 0 && event.offsetY > 450 && event.offsetY < 600)\n        gameStates.currentBackgroundStyle = gameStates.currentBackgroundStyle - 1\n    \n    if (gameStates.currentGameState === GameState.Started && gameStates.currentGameMode === GameMode.Shop && gameStates.currentShopMode === ShopMode.Backround && event.offsetY > 425 && event.offsetY < 600 && event.offsetX < 610 && event.offsetX > 225) {\n        \n        if (gameStates.currentBackgroundStyle === BackgroundStyles.Plastic) {\n            draw.spriteStyle = false\n            draw.plasticStyle = true\n        }\n\n        if (gameStates.currentBackgroundStyle === BackgroundStyles.Sprite) {\n            draw.plasticStyle = false\n            draw.spriteStyle = true\n        }\n        return\n        }\n\n    // Down \"Shop Player\"   \n    if ( gameStates.currentPlayerStyle < 5 && gameStates.currentGameState === GameState.Started && gameStates.currentShopMode === ShopMode.Player && gameStates.currentGameMode === GameMode.Shop && event.offsetX < 850 && event.offsetX > 690 && event.offsetY > 450 && event.offsetY < 600)\n        gameStates.currentPlayerStyle = gameStates.currentPlayerStyle + 1\n\n    // Up \"Shop Player\"\n    if (gameStates.currentPlayerStyle != 1 && gameStates.currentGameState === GameState.Started && gameStates.currentShopMode === ShopMode.Player && gameStates.currentGameMode === GameMode.Shop && event.offsetX < 160 && event.offsetX > 0 && event.offsetY > 450 && event.offsetY < 600)\n        gameStates.currentPlayerStyle = gameStates.currentPlayerStyle - 1\n    \n    if (gameStates.currentGameState === GameState.Started && gameStates.currentGameMode === GameMode.Shop && gameStates.currentShopMode === ShopMode.Player && event.offsetY > 425 && event.offsetY < 600 && event.offsetX < 610 && event.offsetX > 225) {\n        \n        if (gameStates.currentPlayerStyle === PlayerStyles.BlueCube) {\n            gameStates.currentCubeStyle = cubeStyle.BlueCube\n        }\n        \n        else if (gameStates.currentPlayerStyle === PlayerStyles.BlueCubeAlien && draw.blueCubeAlienLock === false) {\n            gameStates.currentCubeStyle = cubeStyle.Alien   \n        }\n        \n        else if (gameStates.currentPlayerStyle === PlayerStyles.BlueCubeLava) {\n            gameStates.currentCubeStyle = cubeStyle.Lava\n        }\n        \n        else if (gameStates.currentPlayerStyle === PlayerStyles.BlueCubeWooden && draw.blueCubeWoodenLock === false) {\n            gameStates.currentCubeStyle = cubeStyle.Wooden \n        }\n        \n        else if (gameStates.currentPlayerStyle === PlayerStyles.BlueCubeSad && draw.blueCubeSadLock === false) {\n            gameStates.currentCubeStyle = cubeStyle.Sad \n        } \n        \n        return\n    }\n\n    ///\n\n\n    // Down \"Freeplay\"   \n    if (gameStates.currentLevelIndex < gameStates.levelController.levels.length - 1 && gameStates.currentGameState === GameState.Rules && gameStates.currentGameMode === GameMode.Freeplay && event.offsetX < 850 && event.offsetX > 690 && event.offsetY > 450 && event.offsetY < 600 && gameStates.mobile === true)\n        gameStates.currentLevelIndex = gameStates.currentLevelIndex + 1\n\n    // Up \"Freeplay\"\n    if (gameStates.currentLevelIndex != 0 && gameStates.currentGameState === GameState.Rules && gameStates.currentGameMode === GameMode.Freeplay && event.offsetX < 160 && event.offsetX > 0 && event.offsetY > 450 && event.offsetY < 600 && gameStates.mobile === true)\n        gameStates.currentLevelIndex = gameStates.currentLevelIndex - 1\n\n    if (gameStates.currentGameMode === GameMode.ItemsInfo) {\n        gameStates.infoController.Mousedown(event)\n    }\n\n    // Rules to Game \"Story Mode\"\n    if (gameStates.currentGameState === GameState.Rules && gameStates.currentGameMode === GameMode.StoryMode && event.offsetY > 500 && event.offsetY < 600 && event.offsetX < 850) {\n        gameStates.SetGameState(GameState.Started)\n        return\n    }\n\n    // Rules to Game \"Freeplay\"\n    if (gameStates.currentGameState === GameState.Rules && gameStates.currentGameMode === GameMode.Freeplay && event.offsetY > 500 && event.offsetY < 600 && event.offsetX < 610 && event.offsetX > 225) {\n        gameStates.SetGameState(GameState.Started)\n        return\n    }\n\n    // Down \"Pause Menu\"\n    if (gameStates.currentGameState === GameState.Paused && gameStates.currentGameMode === GameMode.StoryMode && event.offsetY > gameStates.selectorYBottom && event.offsetY < 600 && event.offsetX < 850)\n        gameStates.menuController.PauseMenu.moveDown()\n\n\n    // Up \"Pause Menu\"\n    if (gameStates.currentGameState === GameState.Paused && gameStates.currentGameMode === GameMode.StoryMode && event.offsetY < gameStates.selectorY && event.offsetY < 600 && event.offsetX < 850)\n        gameStates.menuController.PauseMenu.moveUp()\n\n    if (gameStates.currentGameState === GameState.Paused && gameStates.currentGameMode === GameMode.StoryMode && event.offsetY > gameStates.selectorY && event.offsetY < gameStates.selectorYBottom && event.offsetX < 850) {\n        gameStates.menuController.PauseMenu.selected()\n        return\n    }\n    \n    // Down \"Win\"\n    if (gameStates.currentGameState === GameState.WonStage && event.offsetY > gameStates.selectorYBottom && event.offsetY < 600 && event.offsetX < 850)\n        gameStates.menuController.WinMenu.moveDown()\n\n\n    // Up \"Win\"\n    if (gameStates.currentGameState === GameState.WonStage && event.offsetY < gameStates.selectorY && event.offsetY < 600 && event.offsetX < 850)\n        gameStates.menuController.WinMenu.moveUp()\n\n    if (gameStates.currentGameState === GameState.WonStage && event.offsetY > gameStates.selectorY && event.offsetY < 600 && event.offsetX < 850 && event.offsetY < gameStates.selectorYBottom) {\n        gameStates.menuController.WinMenu.selected()\n        return\n    }\n\n    if (gameStates.currentGameState === GameState.Lost && gameStates.currentGameMode === GameMode.Freeplay) {\n        levelTools.Restart()\n        gameStates.currentGameState = GameState.Rules\n    }\n\n    // Down \"Lost\"\n    if (gameStates.currentGameState === GameState.Lost && gameStates.currentGameMode === GameMode.StoryMode && event.offsetY > gameStates.selectorYBottom && event.offsetY < 600 && event.offsetX < 850)\n        gameStates.menuController.LoseMenu.moveDown()\n\n\n    // Up \"Lost\"\n    if (gameStates.currentGameState === GameState.Lost && gameStates.currentGameMode === GameMode.StoryMode && event.offsetY < gameStates.selectorY && event.offsetY < 600 && event.offsetX < 850)\n        gameStates.menuController.LoseMenu.moveUp()\n\n    if (gameStates.currentGameState === GameState.Lost && gameStates.currentGameMode === GameMode.StoryMode && event.offsetY > gameStates.selectorY && event.offsetY < 600 && event.offsetX < 850 && event.offsetY < gameStates.selectorYBottom) {\n        gameStates.menuController.LoseMenu.selected()\n        return\n    }\n\n    ///\n    \n    if (gameStates.currentGameState !== GameState.Started || gameStates.currentGameMode === GameMode.Shop) {\n        return\n    }\n\n        // \"Right\" Arrow /// \"d\" Key (Right)\n    gameStates.CurrentLevel().players.forEach(function(player) {    \n        if (event.offsetX > player.x + 50 && event.offsetY > player.y - 50 && event.offsetY < player.y + 100 && player.x < 800 && event.offsetY < 600 && event.offsetX < 850)\n        player.moveRight()\n        return\n    })\n\n    \n        // \"Down\" Arrow / \"s\" Key (Down)\n    gameStates.CurrentLevel().players.forEach(function(player) {    \n        if (event.offsetY > player.y + 50 && event.offsetX > player.x - 50 && event.offsetX < player.x + 100 && player.y < 550 && event.offsetY < 600 && event.offsetX < 850)\n        player.moveDown()\n        return\n    })\n    \n        // \"Up\" Arrow / \"w\" Key (Up)\n        gameStates.CurrentLevel().players.forEach(function(player) {    \n        if (event.offsetY < player.y && event.offsetX > player.x - 50 && event.offsetX < player.x + 100 && player.y !== 0 && event.offsetY < 600 && event.offsetX < 850)\n        player.moveUp()\n        return\n    })\n\n        // \"Left\" Arrow / \"a\" Key (Left)\n    gameStates.CurrentLevel().players.forEach(function(player) {\n        if (event.offsetX < player.x && event.offsetY > player.y - 50 && event.offsetY < player.y + 100 && player.x !== 0 && event.offsetY < 600 && event.offsetX < 850)\n        player.moveLeft()\n        return\n    })\n   \n}\n\n\n//# sourceURL=webpack://cube-adventure/./MouseDown.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./Cube Adventure.js");
/******/ 	
/******/ })()
;